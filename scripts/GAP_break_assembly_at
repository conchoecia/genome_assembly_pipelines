"""
This breaks scaffolds in specific places.
 - The resulting scaffolds are just named by their intervals.

Example, break HCA1 at position 5Mb
result:
  - HCA1:1-5000000
  - HCA1:5000001-8967254
"""
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
import subprocess
configfile: "config.yaml"
config["tool"] = "GAP_break_assembly_at"

if "breaks" not in config:
    raise IOError("You must specify the breaks in the config file")

# make sure that the same coord isn't there twice
for thisscaf in config["breaks"]:
    if len(set(config["breaks"][thisscaf])) != len(config["breaks"][thisscaf]):
        raise IOError("You can only specify a breakpoint number once for each chromosome")

rule all:
    input:
        expand(config["tool"] + "/output/assembly/{nom}_output.fasta",
               nom=config["assemblies"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path


rule break_assembly_at:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        assem = config["tool"] + "/output/assembly/{nom}_output.fasta"
    threads: 1
    run:
        outhandle = open(output.assem, "w")
        with open(input.assem, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta"):
                if record.id in config["breaks"]:
                    # now we make breaks
                    # check that the breakpoints are less than the coords
                    for thisbreak in config["breaks"][record.id]:
                        if thisbreak >= len(record.seq):
                            raise IOError("The breakpoint must be < the length of the sequence.")
                    intervals = []
                    # now that we've determined the breaks, find intervals
                    sorted_breaks = [0] + [int(x) for x in list(sorted(
                        config["breaks"][record.id]))] + [len(record.seq)]
                    for i in range(len(sorted_breaks)-1):
                        intervals.append([sorted_breaks[i], sorted_breaks[i+1]])
                    print(intervals)

                    # now go through the intervals and print
                    for thisint in intervals:
                        newseq = str(record.seq)[thisint[0]:thisint[1]].lstrip(
                            " nN").rstrip(" nN")
                        scafname = "{}:{}-{}".format(record.id,
                                                     thisint[0]+1, thisint[1])
                        sr = SeqRecord(Seq(newseq), scafname, '', '')
                        SeqIO.write(sr, outhandle, "fasta")
                else:
                    newseq = str(record.seq).lstrip(" nN").rstrip(" nN")
                    sr = SeqRecord(Seq(newseq), record.id, '', '')
                    SeqIO.write(sr, outhandle, "fasta")
        outhandle.close()
