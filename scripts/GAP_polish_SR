"""
This pipeline polishes the genomes using short reads and pilon.
"""

configfile: "config.yaml"

filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
pilon_path=os.path.join(filepath, "../bin/pilon-1.23.jar")

rule all:
    input:
        expand("GAP_polish_SR/output/{nom}_pilon_output.fasta", nom=config["assemblies"]),

rule pilon_index:
    """
    pilon is the last step
    """
    input:
        assem = lambda wildcards: config["assemblies"][wildcards.nom]
    output:
        assem = "GAP_polish_SR/input/{nom}_pilon_input.fasta",
        amb   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.amb",
        ann   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.ann",
        bwt   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.bwt",
        pac   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.pac",
    threads:
        1
    shell:
        """
        ln -s {input.assem} {output.assem}
        bwa index -a is {output.assem}
        """

rule pilon_map:
    input:
        assem = "GAP_polish_SR/input/{nom}_pilon_input.fasta",
        amb   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.amb",
        ann   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.ann",
        bwt   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.bwt",
        pac   = "GAP_polish_SR/input/{nom}_pilon_input.fasta.pac",
        shotf = config["shotf"],
        shotr = config["shotr"],
    output:
        bam = "GAP_polish_SR/input/bams/shot_to_{nom}_pilon_input.sorted.bam",
    threads:
        workflow.cores
    shell:
        """
        bwa mem -t {threads} {input.assem} \
                 {input.shotf} {input.shotr} | \
                 samtools view -hb -@ {threads} - | \
                 samtools sort -@ {threads} - > {output.bam}
        """

rule pilon_indexbam:
    input:
        bam = "GAP_polish_SR/input/bams/shot_to_{nom}_pilon_input.sorted.bam",
    output:
        bai = "GAP_polish_SR/input/bams/shot_to_{nom}_pilon_input.sorted.bam.bai",
    threads:
        1
    shell:
        """
        samtools index {input.bam}
        """

rule pilon_piloncorrect:
    input:
        assem = "GAP_polish_SR/input/{nom}_pilon_input.fasta",
        bam   = "GAP_polish_SR/input/bams/shot_to_{nom}_pilon_input.sorted.bam",
        bai   = "GAP_polish_SR/input/bams/shot_to_{nom}_pilon_input.sorted.bam.bai",
        pilon = pilon_path
    output:
        assem = "GAP_polish_SR/output/{nom}_pilon_output.fasta"
    params:
        outdir     = "GAP_polish_SR/output/",
        out_prefix = lambda wildcards: "{}_pilon_output".format(wildcards.nom),
        sed_path   = lambda wildcards: "GAP_polish_SR/output/{}_pilon_output.fasta".format(wildcards.nom)
    threads:
        workflow.cores
    shell:
        """
        java -Xmx100G -jar {input.pilon} --genome {input.assem} \
                 --frags {input.bam} \
                 --outdir {params.outdir} \
                 --output {params.out_prefix} \
                 --threads {threads}
        sed -i 's/_pilon//g' {params.sed_path}
        """
