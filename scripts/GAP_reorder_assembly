"""
This snakefile takes an input fasta file,
  then sorts the scaffolds from longest to shortest.
It does not rename scaffolds.
"""
import subprocess
configfile: "config.yaml"
config["tool"] = "GAP_reorder_assembly"

rule all:
    input:
        expand(config["tool"] + "/output/assembly/{nom}_output.fasta",
               nom=config["assemblies"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

rule print_out_temp_assembly_rewrap:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        assem = temp(config["tool"] + "/input/assembly/{nom}_input.rewrap.fasta")
    run:
        from Bio import SeqIO

        outhandle = open(output.assem, "w")
        with open(input.assem, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta"):
                SeqIO.write(record, outhandle, "fasta")
        outhandle.close()

rule fai_index_assemblies:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.rewrap.fasta"
    output:
        fai = config["tool"] + "/input/assembly/{nom}_input.rewrap.fasta.fai"
    shell:
        """
        samtools faidx {input.assem}
        """

rule get_sort_list:
    """
    sort the fai file to figure out the longest scaffolds
    """
    input:
        fai = config["tool"] + "/input/assembly/{nom}_input.rewrap.fasta.fai"
    output:
        sort_list = temp(config["tool"] + "/input/sort_list/{nom}_sort_list.txt")
    threads: 1
    shell:
        """
        sort -k2 -nr {input.fai} | cut -f1,2 > {output.sort_list}
        """

# uses a lot of ram, but OK for pesky headers
rule reorder_fasta:
    """
    this reorders the fasta files based on the length
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.rewrap.fasta",
        fai = config["tool"] + "/input/assembly/{nom}_input.rewrap.fasta.fai",
        sort_list = config["tool"] + "/input/sort_list/{nom}_sort_list.txt"
    output:
        assem = temp(config["tool"] + "/output/assembly/{nom}_output.temp.fasta"),
    threads: 1
    run:
        from Bio import SeqIO

        unprinted = {}
        for record in SeqIO.parse(input.assem, "fasta"):
            unprinted[record.id] = record
        outhandle = open(output.assem, "w")
        # now print out everything else
        with open(input.sort_list, "r") as f:
            for line in f:
                line = line.strip()
                if line:
                    scaf   = line.split()[0]
                    SeqIO.write(unprinted[scaf], outhandle, 'fasta')
                    del unprinted[scaf]
        outhandle.close()

rule reformat_fasta:
    input:
        assem = config["tool"] + "/output/assembly/{nom}_output.temp.fasta",
        reformat = os.path.join(filepath, "../bin/bbmap/reformat.sh")
    output:
        assem = config["tool"] + "/output/assembly/{nom}_output.fasta",
    shell:
        """
        bash {input.reformat} in={input.assem} out={output.assem} fastawrap=60
        """
