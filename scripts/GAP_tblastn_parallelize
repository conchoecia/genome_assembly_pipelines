"""
tblastn crashes with a high number of threads. Use fewer threads

"""
configfile: "config.yaml"
config["tool"] = "GAP_tblastn_parallelize"

from Bio import SeqIO

seq_counter = 0
with open(config["protein_query"]) as handle:
    for record in SeqIO.parse(handle, "fasta"):
        seq_counter += 1

num_seqs_per_file = 50
num_files = int(seq_counter/num_seqs_per_file)

rule all:
    input:
        expand(config["tool"] + "/output/blast/query_{qnum}.tblastn",
                       qnum = range(num_files)),
        chrom = config["tool"] + "/output/query_to_ref.chrom"

# make softlink of the input files
rule softlink_assembly:
    """
    make a softlink of the assembly
    """
    input:
        assem = config["assembly_db"]
    output:
        assem = config["tool"] + "/input/assembly/assembly_query.fasta"
    threads:
        1
    shell:
        """
        ln -s {input.assem} {output.assem}
        """

rule makeblastdb:
    input:
        assem = config["tool"] + "/input/assembly/assembly_query.fasta"
    output:
        ndb = config["tool"] + "/input/assembly/assembly_query.fasta.ndb",
        nhr = config["tool"] + "/input/assembly/assembly_query.fasta.nhr",
        nin = config["tool"] + "/input/assembly/assembly_query.fasta.nin"
    shell:
        """
        makeblastdb -in {input.assem} -dbtype nucl
        """

rule split_the_query:
    """
    Split the query file into smaller pieces that can be more easily run on tblastn
    """
    input:
        query = config["protein_query"]
    output:
        query = expand(config["tool"] + "/input/query/query_{qnum}.fasta",
                       qnum = range(num_files))
    threads: 1
    run:
        seq_counter = 0
        file_counter = 0
        with open(input.query) as handle:
            for record in SeqIO.parse(handle, "fasta"):
                if seq_counter == 0:
                    outfile = config["tool"] + "/input/query/query_{}.fasta".format(
                        file_counter)
                    outhandle = open(outfile, "w")
                SeqIO.write(record, outhandle, "fasta")
                seq_counter += 1
                if seq_counter == num_seqs_per_file:
                    outhandle.close()
                    seq_counter = 0
                    file_counter += 1
            if not outhandle.closed:
                outhandle.close()

rule tblastn:
    """
    Just runs tblastn for one file
    """
    input:
        query = config["tool"] + "/input/query/query_{qnum}.fasta",
        assem = config["tool"] + "/input/assembly/assembly_query.fasta",
        ndb = config["tool"] + "/input/assembly/assembly_query.fasta.ndb",
        nhr = config["tool"] + "/input/assembly/assembly_query.fasta.nhr",
        nin = config["tool"] + "/input/assembly/assembly_query.fasta.nin"
    output:
        query = config["tool"] + "/output/blast/query_{qnum}.tblastn"
    threads: 1
    shell:
        """
        tblastn -db {input.assem} -query {input.query} \
          -num_threads {threads} \
          -outfmt 6 > {output.query}
        """

rule make_a_chrom_file:
    """
    cat the tblastn results to make a .chrom file. Used in the odp pipeline.
    """
    input:
        query = expand(config["tool"] + "/output/blast/query_{qnum}.tblastn",
                       qnum = range(num_files))
    output:
        chrom = config["tool"] + "/output/query_to_ref.chrom",
    params:
        catdir = config["tool"] + "/output/blast/query_*.tblastn"
    threads: 1
    shell:
        """
        cat {params.catdir} | \
          awk 'BEGIN{{prev = ""}} {{if ($1 != prev){{print($0)}}; prev = $1}}' | \
          awk '{{direc = "+"; left = $9; right = $10; \
                if ($9 > $10){{direc = "-"; left = $10; right = $9}}; \
                printf("%s\\t%s\\t%s\\t%d\\t%d\\n", $1, \
                       $2, direc, left, right)}}' | \
              sort -k2,2 -k4,4n > {output.chrom}
        """
