"""
this rule performs a pretty standard job - it makes soft links of the input
  - assemblies and maps reads to them with bwa mem.
"""
rule softlink_assembly:
    """
    map the short reads to the input assembly
    """
    input:
        assem = lambda wildcards: config["assemblies"][wildcards.nom]
    output:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
    threads:
        1
    shell:
        """
        ln -s {input.assem} {output.assem}
        """

rule index_softlinks:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
    output:
        amb   = config["tool"] + "/input/assembly/{nom}_input.fasta.amb",
        ann   = config["tool"] + "/input/assembly/{nom}_input.fasta.ann",
        bwt   = config["tool"] + "/input/assembly/{nom}_input.fasta.bwt",
        pac   = config["tool"] + "/input/assembly/{nom}_input.fasta.pac",
    threads: 1
    shell:
        """
        bwa index -a is {output.assem}
        """

rule pilon_map:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        amb   = config["tool"] + "/input/assembly/{nom}_input.fasta.amb",
        ann   = config["tool"] + "/input/assembly/{nom}_input.fasta.ann",
        bwt   = config["tool"] + "/input/assembly/{nom}_input.fasta.bwt",
        pac   = config["tool"] + "/input/assembly/{nom}_input.fasta.pac",
        shotf = config["shotf"],
        shotr = config["shotr"],
    output:
        bam = config["tool"] + "/input/bams/SR_to_{nom}_input.sorted.bam",
        bai = config["tool"] + "/input/bams/SR_to_{nom}_input.sorted.bam.bai",
    threads:
        workflow.cores
    shell:
        """
        bwa mem -t {threads} {input.assem} \
                 {input.shotf} {input.shotr} | \
                 samtools view -hb -@ {threads} - | \
                 samtools sort -@ {threads} - > {output.bam}
        samtools index {output.bam}
        """
