"""
This snakefile takes an input fasta file,
  sorts the scaffolds from longest to shortest,
  then outputs a new fasta file with all of those
  scaffolds renamed sca1, sca2, ... scaN
"""
import subprocess
configfile: "config.yaml"
config["tool"] = "GAP_reorder_assembly"

rule all:
    input:
        expand(config["tool"] + "/output/assembly/{nom}_output.fasta",
               nom=config["assemblies"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

rule make_a_renamed_file:
    """
    The fasta headers might have some weird characters, so just make a temp
    assembly that we will rename
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
    output:
        assem = config["tool"] + "/output/assembly/{nom}_output.fasta"
    threads: 1
    run:
        scaf_to_size = {}
        scaf_dict = {}
        scaf_counter = 1
        from Bio import SeqIO
        outhandle = open(output.assem, "w")
        with open(input.assem, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta"):
                scaf_to_size[record.id] = len(record.seq)
                scaf_dict[record.id] = record
        # now just write out the biggest to smallest
        for key, value in sorted(scaf_to_size.items(),
                          key=lambda item: item[1], reverse = True):
            scaf_dict[key].id = "sca{}".format(scaf_counter)
            SeqIO.write(scaf_dict[key], outhandle, "fasta")
            scaf_counter += 1
        outhandle.close()
