"""
YAHS
font is small here: https://patorjk.com/software/taag
"""

from Bio import SeqIO
import gzip
import os
import sys
minchromsize = 1000000
configfile: "config.yaml"
config["tool"] = "GAP_yahs"


qvals = [5]

for x in config["assemblies"]:
    if "_" in x:
        raise IOError("You must not have any special characters in the assembly names: {}. Just use [A-Za-z0-9]+".format(x))

filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
chromappath = os.path.join(filepath, "../bin/chromap/chromap")

def flatten(list_of_lists):
    if len(list_of_lists) == 0:
        return list_of_lists
    if isinstance(list_of_lists[0], list):
        return flatten(list_of_lists[0]) + flatten(list_of_lists[1:])
    return list_of_lists[:1] + flatten(list_of_lists[1:])

wildcard_constraints:
    datatype="[A-Za-z0-9]+",
    kmer="[A-Za-z0-9]+",
    nom="[A-Za-z0-9.]+",
    telo="[A-Za-z0-9]+",
    binsize="[0-9]+",
    qval="[0-9]+",
    telodir="[fr]"

rule all:
    input:
        #expand(config["tool"] + "/output/{nom}/{nom}_q_{qval}.bed",
        #        nom = config["assemblies"], qval = qvals),
        expand(config["tool"] + "/output/{nom}/{nom}_hic.sorted.bam",
                nom = config["assemblies"]),
        expand(config["tool"] + "/output/{nom}/yahs/{nom}_scaffolds_final.fa",
                nom = config["assemblies"]),
        expand(config["tool"] + "/output/{nom}/yahs/{nom}.hic",
                nom = config["assemblies"])



# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

rule compile_chromap:
    """
    compile chromap if it does not yet exist
    """
    output:
        chromap = os.path.join(filepath, "../bin/chromap/chromap")
    params:
        mvdir = os.path.join(filepath, "../bin/")
    threads: 1
    shell:
        """
        git clone https://github.com/haowenz/chromap.git
        cd chromap
        make
        cd ..
        mv chromap/ {params.mvdir}
        """

rule check_assembly:
    """
    Check that there are no duplicate seqnames in the assembly.
    This will fail silently in JBAT and waste time.
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        check = config["tool"] + "/input/assembly/{nom}_input.fasta.check"
    threads: 1
    run:
        chromlist = set()
        with open(input.assem) as handle:
            for record in SeqIO.parse(handle, "fasta"):
                if record.id in chromlist:
                    raise IOError("There are some sequence IDs that are duplicated in the fasta file. Please make sure that each file has a unique ID and restart the pipeline")
                chromlist.add(record.id)
        with open(output.check, "w") as outhandle:
            print("fasta headers are all unique", file = outhandle)

rule index_ref:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        check = config["tool"] + "/input/assembly/{nom}_input.fasta.check",
        chromap = os.path.join(filepath, "../bin/chromap/chromap")
    output:
        index = config["tool"] + "/input/assembly/{nom}_input.fasta.index"
    shell:
        """
        {input.chromap} -i -r {input.assem} -o {output.index}
        """

rule hic_to_pairs:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        check = config["tool"] + "/input/assembly/{nom}_input.fasta.check",
        index   = config["tool"] + "/input/assembly/{nom}_input.fasta.index",
        chromap = chromappath,
        left  = flatten([config["libs"][x]["read1"] for x in config["libs"]]),
        right = flatten([config["libs"][x]["read2"] for x in config["libs"]])
    output:
        pairs = config["tool"] + "/output/{nom}/{nom}_q_{qval}.pairs"
    params:
        left  = " -1 ".join(flatten([config["libs"][x]["read1"] for x in config["libs"]])),
        right = " -2 ".join(flatten([config["libs"][x]["read2"] for x in config["libs"]])),
        qval  = lambda wildcards: wildcards.qval
    threads: workflow.cores - 2
    shell:
        """
        {input.chromap} --preset hic -x {input.index} \
            -r {input.assem} \
            -1 {params.left}  \
            -2 {params.right} \
            -t {threads} \
            -q {params.qval} \
            -o {output.pairs}
        """

rule hic_to_sam:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        check = config["tool"] + "/input/assembly/{nom}_input.fasta.check",
        index   = config["tool"] + "/input/assembly/{nom}_input.fasta.index",
        chromap = chromappath,
        left  = flatten([config["libs"][x]["read1"] for x in config["libs"]]),
        right = flatten([config["libs"][x]["read2"] for x in config["libs"]])
    output:
        sam = temp(config["tool"] + "/output/{nom}/{nom}_hic.sam")
    params:
        left  = ",".join(flatten([config["libs"][x]["read1"] for x in config["libs"]])),
        right = ",".join(flatten([config["libs"][x]["read2"] for x in config["libs"]]))
    threads: workflow.cores - 2
    shell:
        """
        {input.chromap} --preset hic -x {input.index} \
            -r {input.assem} \
            -1 {params.left}  \
            -2 {params.right} \
            -t {threads} \
            --SAM \
            -o {output.sam}
        """

rule sam_to_bam:
    """
    Now convert the sam to bam and sort
    """
    input:
        sam = config["tool"] + "/output/{nom}/{nom}_hic.sam"
    output:
        bam = config["tool"] + "/output/{nom}/{nom}_hic.sorted.bam"
    threads: max(1, int(workflow.cores / 2))
    shell:
        """
        samtools view -@ {threads} -hb {input.sam} | \
            samtools sort -@ {threads} -o {output.bam}
        """

rule pairs_to_bed:
    """
    Converts the pairs file to a bed file used for yahs.
    The input and output are both tab-delimited.

    The input file looks like this:
    TUPAC_0001:3:1:0:1452#0  chr7  118970079  chr7  118965072  +  +  UU

    The output file looks like this:
    chr7   118970079   118970129   TUPAC_0001:3:1:0:1452#0/1   37   -
    chr7   118965072   118965122   TUPAC_0001:3:1:0:1452#0/2   37   +
    """
    input:
        pairs = config["tool"] + "/output/{nom}/{nom}_q_{qval}.pairs"
    output:
        bedfile = config["tool"] + "/output/{nom}/{nom}_q_{qval}.bed"
    threads: 1
    shell:
        """
        cat {input.pairs} | \
        grep -v '#' | \
        awk 'BEGIN{{OFS="\t"}}{{ \
             print $2,$3,$3+50,$1"/1",37,$6; \
             print $4,$5,$5+50,$1"/2",37,$7}}' > {output.bedfile}
        """

rule index_assembly:
    """
    Run samtools faidx on the assembly to generate a .fai
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        check = config["tool"] + "/input/assembly/{nom}_input.fasta.check"
    output:
        fai = config["tool"] + "/input/assembly/{nom}_input.fasta.fai"
    shell:
        """
        samtools faidx {input.assem}
        """

rule compile_yahs:
    """
    compile chromap if it does not yet exist
    """
    output:
        yahs   = os.path.join(filepath, "../bin/yahs/yahs"),
        juicer = os.path.join(filepath, "../bin/yahs/juicer")
    params:
        mvdir = os.path.join(filepath, "../bin/")
    threads: 1
    shell:
        """
        git clone https://github.com/c-zhou/yahs.git
        cd yahs
        make
        cd ..
        mv yahs/ {params.mvdir}
        """

rule run_yahs_on_the_data:
    """
    needs a more recent version of yahs
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        yahs = os.path.join(filepath, "../bin/yahs/yahs"),
        fai = config["tool"] + "/input/assembly/{nom}_input.fasta.fai",
        bam = config["tool"] + "/output/{nom}/{nom}_hic.sorted.bam"
    output:
        yahs     = config["tool"] + "/output/{nom}/yahs/{nom}_scaffolds_final.fa",
        agp      = config["tool"] + "/output/{nom}/yahs/{nom}_scaffolds_final.agp",
        yahsbin  = config["tool"] + "/output/{nom}/yahs/{nom}.bin"
    params:
        outprefix = config["tool"] + "/output/{nom}/yahs/{nom}"
    threads: workflow.cores - 1
    shell:
        """
        {input.yahs} -o {params.outprefix} --no-contig-ec --no-scaffold-ec --no-mem-check \
            {input.assem} {input.bam}
        """

rule generate_long_file_for_JBAT:
    """
    generates a .long file for making a hic file

    modified from the instructions from the yahs github

    3d-dna long spec can be found here: https://github.com/aidenlab/juicer/wiki/Pre#long-format

    0	scaffold_1	100000148	0	1	scaffold_1	101849186	1
    0	scaffold_1	100000148	0	1	scaffold_1	101849186	1
    0	scaffold_1	100000558	0	1	scaffold_1	100002257	1
    0	scaffold_1	100000561	0	1	scaffold_1	49722485	1
    0	scaffold_1	100000561	0	1	scaffold_1	49722485	1
    0	scaffold_1	100000561	0	1	scaffold_1	49722485	1
    0	scaffold_1	100000561	0	1	scaffold_1	49722485	1
    
    0 Scaffold5 12278 0 0 Scaffold5 33988 1 1 - - 1  - - -
    0 Scaffold5 12278 0 0 Scaffold5 33988 1 1 - - 1  - - -
    0 Scaffold5 12278 0 0 Scaffold5 33988 1 1 - - 1  - - -
    16 Scaffold5 12297 0 16 Scaffold5 80797992 1 1 - - 1  - - -
    0 Scaffold5 12652 0 0 Scaffold5 2028951 1 1 - - 1  - - -
    0 Scaffold5 12652 0 0 Scaffold5 2028951 1 1 - - 1  - - -
    0 Scaffold5 12864 0 16 Scaffold5 178772324 1 1 - - 1  - - -
    """
    input:
        yahsbin  = config["tool"] + "/output/{nom}/yahs/{nom}.bin",
        agp      = config["tool"] + "/output/{nom}/yahs/{nom}_scaffolds_final.agp",
        fai = config["tool"] + "/input/assembly/{nom}_input.fasta.fai",
        juicer = os.path.join(filepath, "../bin/yahs/juicer")
    output:
        long  = config["tool"] + "/output/{nom}/yahs/{nom}.long"
    threads: workflow.cores - 1
    resources:
        mem_mb = 32000
    shell:
        """
        {input.juicer} pre {input.yahsbin} {input.agp} {input.fai} | \
           sort -k2,2d -k6,6d -T ./ --parallel={threads} -S32G | \
           awk 'NF' | \
           awk '{{print $1, $2, $3, $4, $5, $6, $7, $8, "1 - - 1  - - -" }}' > {output.long}
        """

rule generate_assembly_for_hic_gen:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        check = config["tool"] + "/input/assembly/{nom}_input.fasta.check",
        awkscript= os.path.abspath(os.path.join( filepath, "../bin/generate-assembly-file-from-fasta.awk"))
    output:
        assembly = config["tool"] + "/input/assembly/{nom}_input.fasta.assembly"
    threads: 1
    shell:
        """
        awk -f {input.awkscript} {input.assem} > {output.assembly}
        """

rule get3ddna:
    """
    from https://github.com/Yujiaxin419/ALLHiC/wiki/Manually-refine-ALLHiC-scaffold-assembly-through-juicebox#hic-files
    """
    output:
        hicvis = os.path.join(filepath, "../bin/3d-dna/visualize/run-assembly-visualizer.sh")
    params:
        mvdir = os.path.join(filepath, "../bin/"),
        rmdir = os.path.join(filepath, "../bin/3d-dna"),
    threads: 1
    shell:
        """
        rm -rf 3d-dna
        rm -rf {params.rmdir}
        git clone https://github.com/aidenlab/3d-dna.git
        mv 3d-dna/ {params.mvdir}
        """

rule JBAT_pairs_to_hic:
    """
    Use 3D DNA to make an editable hic file

    This is done in a for loop to avoid race conditions.
    Done with reverse sorting order to get files faster.
    """
    input:
        hicvis   = os.path.join(filepath, "../bin/3d-dna/visualize/run-assembly-visualizer.sh"),
        longp    = config["tool"] + "/output/{nom}/yahs/{nom}.long",
        assembly = config["tool"] + "/input/assembly/{nom}_input.fasta.assembly"
    output:
        hicmap = config["tool"] + "/output/{nom}/yahs/{nom}.hic"
    params:
        outprefix  = lambda wildcards: "{}.hic".format(wildcards.nom)
    threads: 1
    shell:
        """
        # make a directory
        mkdir -p "{wildcards.nom}TEMP"
        cd "{wildcards.nom}TEMP" 

        # make a hic file
        bash {input.hicvis} -p false ../{input.assembly} ../{input.longp} || true
        cp {params.outprefix} ../{output.hicmap}

        #rm ./*scaffold_track.txt
        #rm ./*superscaf_track.txt
        #rm ./*asm_mnd.txt
        #cd ../
        #rm -rf  "{wildcards.nom}TEMP" 
        """
