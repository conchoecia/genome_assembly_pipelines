"""
This snakefile runs blobtools on the assembly.
"""
configfile: "config.yaml"
config["tool"] = "GAP_blobtools"

rule all:
    input:
        expand(config["tool"] + "/output/blobtools_{nom}/{nom}_blobtools.blobDB.json.bestsum.phylum.p7.span.100.blobplot.bam0.png",
               nom = config["assemblies"])

# this bit makes softlinks of the assemblies and maps the short reads
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
SR_link_and_map=os.path.join(filepath, "snakemake_includes/SR_map_to_input")
include: SR_link_and_map

rule download_taxid:
    output:
        taxid_file = filepath + "/../db/nr_accesion_to_taxids.txt"
    threads: 1
    params:
        db = config["nr_db"]
    shell:
        """
        blastdbcmd -db {params.db} -entry all \
           -outfmt "%a %T" | \
           awk '{{print($1, "NCBI_TaxID", $2)}}' > {output.taxid_file}
        """

rule get_diamond_nr_hits:
    input:
        db = config["diamond_nr_db"],
        assembly = config["tool"] + "/input/assembly/{nom}_input.fasta",
        taxid_file = filepath + "/../db/nr_accesion_to_taxids.txt"
    output:
        dmnd_out = config["tool"] + "/input/dmnd/{nom}_dmnd.blastx"
    threads:
        workflow.cores - 1
    shell:
        """
        diamond blastx \
          --query {input.assembly} \
          --db {input.db} \
          --outfmt 6 \
          --sensitive \
          --evalue 0.001 \
          --threads {threads} \
          --out {output.dmnd_out}
        """

rule blobtools_taxonify:
    input:
        dmnd_out = config["tool"] + "/input/dmnd/{nom}_dmnd.blastx",
        taxid_file = filepath + "/../db/nr_accesion_to_taxids.txt"
    output:
        taxonify_out = config["tool"] + "/input/dmnd/{nom}_dmnd.blastx.taxified.out",
    params:
        outprefix = lambda wildcards: config["tool"] + "/input/dmnd/{}_dmnd.blastx.taxified".format(wildcards.nom)
    shell:
        """
        blobtools taxify -f {input.dmnd_out} -m {input.taxid_file} -s 0 -t 2 -o {params.outprefix}
        """

rule blobtools_create:
    input:
        assembly = config["tool"] + "/input/assembly/{nom}_input.fasta",
        bam = config["tool"] + "/input/bams/SR_to_{nom}_input.sorted.bam",
        bai = config["tool"] + "/input/bams/SR_to_{nom}_input.sorted.bam.bai",
        taxonify_out = config["tool"] + "/input/dmnd/{nom}_dmnd.blastx.taxified.out",
    output:
        blob_results = config["tool"] + "/output/blobtools_{nom}/{nom}_blobtools.blobDB.json"
    params:
        blob_prefix  = config["tool"] + "/output/blobtools_{nom}/{nom}_blobtools"
    shell:
        """
        blobtools create \
           -i {input.assembly} \
           -b {input.bam} \
           -t {input.taxonify_out} \
           -o {params.blob_prefix}
        """

rule blobtools_view_and_plot:
    input:
        blob_results = config["tool"] + "/output/blobtools_{nom}/{nom}_blobtools.blobDB.json"
    output:
        blob_results = config["tool"] + "/output/blobtools_{nom}/{nom}_blobtools.blobDB.json.bestsum.phylum.p7.span.100.blobplot.bam0.png"
    params:
        mv_prefix = lambda wildcards: "{}_blobtools.blobDB.".format(wildcards.nom),
        mv_folder = lambda wildcards: config["tool"] + "/output/blobtools_{}/".format(wildcards.nom)
    threads: 1
    shell:
        """
        blobtools view -i {input.blob_results}
        blobtools plot -i {input.blob_results}
        mv {params.mv_prefix}* {params.mv_folder}
        """
