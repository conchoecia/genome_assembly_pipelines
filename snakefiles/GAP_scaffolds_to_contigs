"""
This just converts scaffolds to contigs
"""
configfile: "config.yaml"
config["tool"] = "GAP_scaffolds_to_contigs"

rule all:
    input:
        expand(config["tool"] + "/output/{nom}_output.fasta",
                nom=config["assemblies"])


# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

rule scaffolds_to_contigs:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        assem = config["tool"] + "/output/{nom}_output.fasta"
    params:
        min_gap = 0
    threads: 1
    run:
        from Bio import SeqIO
        import sys
        contig_counter = 1
        min_gap = params.min_gap
        lw = 80
        out_handle = open(output.assem, "w")

        Ns = ['N', 'n']
        if min_gap == 0:
            in_gap = False
            for record in SeqIO.parse(input.assem, "fasta"):
                print(">contig{}".format(contig_counter), file=out_handle)
                chunk = ""
                for i in range(len(record.seq)):
                    if record.seq[i] in Ns:
                        if in_gap:
                            pass
                        else:
                            #we just transitioned to a gap. Print the contig
                            if len(chunk) > 0:
                                print(chunk, file=out_handle)
                                contig_counter += 1
                                print(">contig{}".format(contig_counter), file=out_handle)
                            chunk = ""
                        in_gap = True
                    else:
                        in_gap = False
                        #not an N. collect and print.
                        if len(chunk) < lw:
                            chunk += record.seq[i]
                        else:
                            #time to print and start over
                            print(chunk, file=out_handle)
                            chunk = record.seq[i]
                if len(chunk) > 0:
                    print(chunk, file=out_handle)
                contig_counter += 1
        else:
            for record in SeqIO.parse(input.assem, "fasta"):
                N_count = 0
                this_seq = ""
                for i in range(len(record.seq)):
                    if record.seq[i] in Ns:
                        N_count+=1
                    else:
                        if N_count > min_gap:
                            print(">contig{}".format(contig_counter))
                            for chunk in (this_seq[i:i+lw] for i in range(0, len(this_seq), lw)):
                                print(chunk, file=out_handle)
                            this_seq = ""
                            contig_counter += 1
                        else:
                            this_seq = this_seq + ("".join(["N"]*N_count) )
                        N_count = 0
                        this_seq = this_seq + record.seq[i]
                if N_count == 0:
                    print(">contig{}".format(contig_counter), file=out_handle)
                    for chunk in (this_seq[i:i+lw] for i in range(0, len(this_seq), lw)):
                        print(chunk, file=out_handle)
                    this_seq = ""
                    contig_counter += 1
