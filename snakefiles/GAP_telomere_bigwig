"""
Program  : GAP_telomere_bigwig
Language : snakemake
Date     : 2025-06
Author   : Darrin T. Schultz
Email    : darrin.schultz@univie.ac.at
Github   : https://github.com/conchoecia/genome_assembly_pipelines
Support  : For issues or questions, please search if the topic has been discussed already
           on github and open a new issue if not: https://github.com/conchoecia/genome_assembly_pipelines/issues
License  : GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007. See the LICENSE file.
Citation : Please cite the GAP repository in your publications.

Description:
  This Snakemake workflow is part of the Genome Assembly Pipelines (GAP) repository.
  It scans genome assemblies for telomeric repeat sequences (e.g., TTAGGG and its reverse complement),
  quantifies their distribution along scaffolds, and generates strand-specific bigWig coverage files.

  The workflow can also optionally combine paired telomeric repeat tracks (forward and reverse complements)
  into multivec files for visualization in HiGlass or other multiscale genome browsers.
   (HiGlass multivec functionality is currently in development out.)

  Key features include:
    - Support for custom telomeric repeat motifs (specified 5'->3')
    - Separate bigWig files for each repeat orientation
    - Multivec construction for paired telomeric motifs
    - Compatibility with assemblies provided in FASTA format

Usage instructions:
  - See https://github.com/conchoecia/genome_assembly_pipelines#getting-started
  - Copy the /path/to/genome_assembly_pipelines/example_configs/config_GAP_telomere_bigwig.yaml
    to your working directory and rename it to config.yaml.
  - Define assemblies and telomeric motifs in `config.yaml`
  - Run with: `snakemake --cores N --snakefile /path/to/genome_assembly_pipelines/snakefiles/GAP_telomere_bigwig`

Unique Requirements:
  - pyBigWig
"""

from Bio import SeqIO
import gzip
import matplotlib.pyplot as plt
from matplotlib import rcParams
import numpy as np
import os
import pyBigWig

import sys
minchromsize = 1000000
configfile: "config.yaml"
config["tool"] = "GAP_telomere_bigwig"

for x in config["assemblies"]:
    if "_" in x:
        raise IOError("You must not have any special characters in the assembly names: {}. Just use [A-Za-z0-9]+".format(x))

filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
kmer_position_path=os.path.join(filepath, "../bin/kmer_positions.py")
picard_path=os.path.join(filepath, "../bin/picard.jar")
chromappath = os.path.join(filepath, "../bin/chromap/chromap")
bedsort_path=os.path.join(filepath, "../bin/bedSort")
bed2bw_path=os.path.join(filepath,  "../bin/bedGraphToBigWig")

def rc(seq):
    """
    reverse complement the sequence
    """
    this_complement = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}
    return "".join(this_complement.get(base, base) for base in reversed(seq))

def flatten(list_of_tuples):
    return [item for pair in list_of_tuples for item in pair]

###
###  KMER PARSING SECTION
###
# if kmers not specified in config, add
if "kmers" not in config:
    config["kmers"] = []

# if telomere kmers not specified in the config file, use regular metazoan seq
if "telomere_seqs" not in config:
    config["telomere_seqs"] = ["TTAGGG"]
config["telomere_seqs"] = [x.upper() for x in config["telomere_seqs"]]

# make sure that there are no reverse complements in the telomere_seqs
#  we don't want this because we specifically define the revcomp in the
#  next step
for x in config["telomere_seqs"]:
    if rc(x) in config["telomere_seqs"]:
        raise IOError("Don't include the reverse reverse complement of the telomere sequences")

# set up the telomere strands
config["telomere_strands"] = {seq: (seq, rc(seq)) for seq in config["telomere_seqs"]}
#config["telomere_strands"] = []
#for seq in config["telomere_seqs"]:
#    config["telomere_strands"].append((seq, "f"))
#    config["telomere_strands"].append((rc(seq), "r"))

# now that we're done with the telomere strands, add the rcs to independently look
config["telomere_seqs"] += [rc(x) for x in config["telomere_seqs"]]

# make sure all the kmers are uppercase. If the rc is also present, remove it
keeps = []
for i in range(len(config["telomere_seqs"])):
    thiskmer = config["telomere_seqs"][i].upper()
    thisrc = rc(thiskmer)
    if (thiskmer not in keeps) and (thisrc not in keeps):
        keeps.append(thiskmer)
config["telomere_seqs"] = keeps

wildcard_constraints:
    datatype="[A-Za-z0-9]+",
    kmer="[A-Za-z0-9]+",
    nom="[A-Za-z0-9.]+",
    telo="[A-Za-z0-9]+",
    binsize="[0-9]+",
    qval="[0-9]+"
rule all:
    input:
        # gaps
        expand(config["tool"] + "/output/{nom}/{nom}_gaps.bed",
               nom = config["assemblies"]),
        #expand(config["tool"] + "/output/{nom}/{nom}_gaps.beddb",
        #       nom = config["assemblies"]),
        # Telomere and kmer depth bigwigs
        expand(config["tool"] + "/output/{nom}/{nom}_teloKmer_{telo}.bw",
               telo = flatten(config["telomere_strands"].values()),
               nom = config["assemblies"]),
        expand(config["tool"] + "/output/{nom}/plots/{nom}_allData_linear_track.pdf",
            nom = config["assemblies"]),
        expand(config["tool"] + "/output/{nom}/plots/{nom}_stacked_per_scaffold.pdf",
            nom = config["assemblies"])

        #expand(config["tool"] + "/output/{nom}/{nom}_kmer_{kmer}.bw",
        #       kmer = config["kmers"], nom = config["assemblies"]),

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

#   ___  _   _              _  _ _  ___ _              ___ _         __  __
#  / _ \| |_| |_  ___ _ _  | || (_)/ __| |__ _ ______ / __| |_ _  _ / _|/ _|
# | (_) |  _| ' \/ -_) '_| | __ | | (_ | / _` (_-<_-< \__ \  _| || |  _|  _|
#  \___/ \__|_||_\___|_|   |_||_|_|\___|_\__,_/__/__/ |___/\__|\_,_|_| |_|

rule chrom_size:
    """
    make a file with the chromosome sizes
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        cs = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    threads: 1
    shell:
        """
        bioawk -cfastx '{{printf("%s\\t%d\\n", $name, length($seq))}}' {input.assem} > {output.cs}
        """


rule genome_bed:
    """
    just a bed file of the whole genome assembly to usebedtools subtract
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        bed   = config["tool"] + "/output/{nom}/{nom}.bed"
    threads: 1
    shell:
        """
        bioawk -cfastx '{{printf("%s\\t0\\t%d\\n", $name, length($seq))}}' {input.assem} | \
          bedtools sort > {output.bed}
        """

rule gaps_from_assembly:
    input:
        assem  = config["tool"] + "/input/assembly/{nom}_input.fasta",
    output:
        gapbed = config["tool"] + "/output/{nom}/{nom}_gaps.bed"
    threads: 1
    run:
        # this block of code from https://www.biostars.org/p/133742/
        #import the SeqIO module from Biopython
        outhandle = open(output.gapbed, "w")
        with open(input.assem, mode="r") as fasta_handle:
            for record in SeqIO.parse(fasta_handle, "fasta"):
                start_pos=0
                counter=0
                gap=False
                gap_length = 0
                for char in record.seq:
                    if char == 'N':
                        if gap_length == 0:
                            start_pos=counter
                            gap_length = 1
                            gap = True
                        else:
                            gap_length += 1
                    else:
                        if gap:
                            print("{} {} {}".format(
                                record.id,
                                start_pos,
                                start_pos + gap_length),
                                  file = outhandle)
                            gap_length = 0
                            gap = False
                    counter += 1
        outhandle.close()

#rule make_gaps_beddb:
#    """
#    This is really only for highglass, so it can be
#    """
#    input:
#        assem  = config["tool"] + "/input/assembly/{nom}_input.fasta",
#        gapbed = config["tool"] + "/output/{nom}/{nom}_gaps.bed",
#        cs     = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
#    output:
#        beddb = config["tool"] + "/output/{nom}/{nom}_gaps.beddb"
#    threads: 1
#    shell:
#        """
#        clodius aggregate bedfile \
#          --chromsizes-filename {input.cs} \
#          --delimiter " " {input.gapbed} \
#          --assembly {input.assem} \
#          --output-file {output.beddb}
#        """

# ___________    .__                                         __
# \__    ___/___ |  |   ____   _____   ___________   ____   |  | __ _____   ___________
#   |    |_/ __ \|  |  /  _ \ /     \_/ __ \_  __ \_/ __ \  |  |/ //     \_/ __ \_  __ \
#   |    |\  ___/|  |_(  <_> )  Y Y  \  ___/|  | \/\  ___/  |    <|  Y Y  \  ___/|  | \/
#   |____| \___  >____/\____/|__|_|  /\___  >__|    \___  > |__|_ \__|_|  /\___  >__|
#              \/                  \/     \/            \/       \/     \/     \/

rule telomere_kmer_positions_bigwig:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        kmer_counter = kmer_position_path,
        bed = config["tool"] + "/output/{nom}/{nom}.bed",
        bedsort = bedsort_path,
        bed2bw = bed2bw_path,
        cs = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    output:
        temppos   = temp(config["tool"] + "/output/{nom}/TEMP_{nom}_teloKmer_{telo}.nozero.bg"),
        tempzeros = temp(config["tool"] + "/output/{nom}/TEMP_{nom}_teloKmer_{telo}.zero.bg"),
        bg    =     temp(config["tool"] + "/output/{nom}/{nom}_teloKmer_{telo}.bg"),
        depth =     temp(config["tool"] + "/output/{nom}/{nom}_teloKmer_{telo}.s.bg"),
        bw    =          config["tool"] + "/output/{nom}/{nom}_teloKmer_{telo}.bw"
    params:
        k = lambda wildcards: len(wildcards.telo)
    threads: 1
    shell:
        """
        # get the kmer positions
        cat {input.assem} | \
          python {input.kmer_counter} {wildcards.telo} | \
          bedtools merge | \
          awk '{{ printf("%s\\t%d\\t%d\\t%d\\n", $1, $2, $3, ($3 - $2) / {params.k}) }}' | \
          bedtools sort > {output.temppos}

        # get subtract for the zero positions
        bedtools subtract -a {input.bed} -b {output.temppos} | \
          awk '{{printf("%s\\t0\\n", $0)}}' > {output.tempzeros}

        # now cat and sort
        cat {output.temppos} {output.tempzeros} | \
          sort -k1,1 -k2,2n -k3,3n > {output.bg}

        # now do the steps to make a bigwig
        chmod u+x {input.bedsort}
        chmod u+x {input.bed2bw}
        {input.bedsort} {output.bg} {output.depth}
        {input.bed2bw} {output.depth} {input.cs} {output.bw}
        """

#rule telomere_kmer_bigwig_to_multivec:
#    """
#    This is for HiGlass. Turn this off if you don't need it.
#    make a multivec from multiple bigwig files based on working multivec spec
#      - https://paper.dropbox.com/doc/Multivec-Spec-3IelZjzjXDo7mGy3SkGUF
#
#    This multivec file is from looking at the kmers present in the genome
#
#    #--row-infos-filename {input.rows} \
#    """
#    input:
#        bw_pairs = lambda wildcards: [
#            [
#                config["tool"]}+ "/output/{wildcards.nom}/{wildcards.nom}_teloKmer_{fwd}.bw",
#                config["tool"]}+ "/output/{wildcards.nom}/{wildcards.nom}_teloKmer_{rev}.bw"
#            ]
#            for fwd, rev in config["telomere_strands"]
#        ],
#        cs = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
#    output:
#        multivec = config["tool"] + "/output/{nom}/{nom}_telomereKmerDepth_{telo}.bw.mv5"
#    threads: 1
#    shell:
#        """
#        clodius convert bigwigs-to-multivec {input.bw_f} {input.bw_r} \
#        --chromsizes-filename {input.cs} \
#        --output-file {output.multivec}
#        """

rule kmer_positions_bigwig:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        kmer_counter = kmer_position_path,
        bed = config["tool"] + "/output/{nom}/{nom}.bed",
        bedsort = bedsort_path,
        bed2bw = bed2bw_path,
        cs = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    output:
        temppos   = temp(config["tool"] + "/output/depth/TEMP_{nom}_kmer_{kmer}.nozero.bg"),
        tempzeros = temp(config["tool"] + "/output/depth/TEMP_{nom}_kmer_{kmer}.zero.bg"),
        bg    =      config["tool"] + "/output/depth/{nom}_kmer_{kmer}.bg",
        depth = temp(config["tool"] + "/output/depth/{nom}_kmer_{kmer}.s.bg"),
        bw    =      config["tool"] + "/output/{nom}/{nom}_kmer_{kmer}.bw"
    params:
        tkmers = lambda wildcards: " ".join(config["kmers"][wildcards.kmer]),
        k = lambda wildcards: int(list(set([len(x) for x in config["kmers"][wildcards.kmer]]))[0])
    threads: 1
    shell:
        """
        # get the kmer positions
        cat {input.assem} | \
          python {input.kmer_counter} {params.k} {params.tkmers} | \
          bedtools merge | \
          awk '{{ printf("%s\t%d\t%d\t%d\n", $1, $2, $3, ($3 - $2) / {params.k}) }}' | \
          bedtools sort > {output.temppos}

        # get subtract for the zero positions
        bedtools subtract -a {input.bed} -b {output.temppos} | \
          awk '{{printf("%s\\t0\\n", $0)}}' > {output.tempzeros}

        # now cat and sort
        cat {output.temppos} {output.tempzeros} | \
          sort -k1,1 -k2,2n -k3,3n > {output.bg}

        # now do the steps to make a bigwig
        chmod u+x {input.bedsort}
        chmod u+x {input.bed2bw}
        {input.bedsort} {output.bg} {output.depth}
        {input.bed2bw} {output.depth} {input.cs} {output.bw}
        """

# BG to BW
#   ___  ___   _         _____      __
#  | _ )/ __| | |_ ___  | _ ) \    / /
#  | _ \ (_ | |  _/ _ \ | _ \\ \/\/ /
#  |___/\___|  \__\___/ |___/ \_/\_/
#

rule bedgraph_and_bed2bigwig:
    input:
        depth   = config["tool"] + "/output/depth/{nom}_{datatype}.bg",
        bedsort = bedsort_path,
        bed2bw = bed2bw_path,
        cs = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    output:
        depth = temp(config["tool"] + "/output/depth/{nom}_{datatype}.s.bg"),
        bw    = config["tool"] + "/output/{nom}/{nom}_{datatype}.bw"
    threads: 1
    shell:
        """
        chmod u+x {input.bedsort}
        chmod u+x {input.bed2bw}
        {input.bedsort} {input.depth} {output.depth}
        {input.bed2bw} {output.depth} {input.cs} {output.bw}
        """

rule plot_bigwig_track:
    """
    Plot a telomere or kmer bigWig-like track along the genome, concatenated across chromosomes.
    Chromosome boundaries are marked with vertical yellow bars.
    """
    input:
        kmers = expand(config["tool"] + "/output/{{nom}}/{{nom}}_kmer_{kmer}.bw",
                        kmer = config["kmers"]),
        telos = expand(config["tool"] + "/output/{{nom}}/{{nom}}_teloKmer_{kmer}.bw",
                     kmer = flatten(config["telomere_strands"].values())),
        chromsizes = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    output:
        plot = config["tool"] + "/output/{nom}/plots/{nom}_allData_linear_track.pdf"
    run:
        rcParams['pdf.fonttype'] = 42  # Ensures text is stored as actual text in PDF
        rcParams['ps.fonttype'] = 42

        os.makedirs(os.path.dirname(output.plot), exist_ok=True)

        # Load chromsizes and compute offsets
        chrom_order = []
        chrom_lengths = []
        with open(input.chromsizes) as f:
            for line in f:
                chrom, size = line.strip().split("\t")
                chrom_order.append(chrom)
                chrom_lengths.append(int(size))
        total_len = sum(chrom_lengths)
        chrom_starts = np.cumsum([0] + chrom_lengths[:-1])
        chrom_offsets = {chrom: offset for chrom, offset in zip(chrom_order, chrom_starts)}

        # Combine all bigWigs to be plotted
        all_tracks = input.kmers + input.telos
        track_labels = (
            [f"kmer_{os.path.basename(f).split('_kmer_')[-1].replace('.bw', '')}" for f in input.kmers] +
            [f"telo_{os.path.basename(f).split('_teloKmer_')[-1].replace('.bw', '')}" for f in input.telos]
        )

        fig, axes = plt.subplots(nrows=len(all_tracks), ncols=1, figsize=(20, 1.5 * len(all_tracks)), sharex=True)
        if len(all_tracks) == 1:
            axes = [axes]  # Ensure iterable even if one track

        for ax, track_path, label in zip(axes, all_tracks, track_labels):
            bw = pyBigWig.open(track_path)
            x = []
            y = []
            for chrom in chrom_order:
                vals = bw.values(chrom, 0, chrom_lengths[chrom_order.index(chrom)])
                vals = np.nan_to_num(vals, nan=0.0)
                offset = chrom_offsets[chrom]
                x.extend(range(offset, offset + len(vals)))
                y.extend(vals)
            bw.close()
            ax.plot(x, y, lw=0.5)
            ax.set_ylabel(label, rotation=0, ha="right", va="center")
            ax.set_ylim(0, max(y) * 1.05 if max(y) > 0 else 1)
            ax.spines["top"].set_visible(False)
            ax.spines["right"].set_visible(False)
            for boundary in chrom_starts[1:]:
                ax.axvline(x=boundary, color="gold", lw=1, linestyle="-")

        axes[-1].set_xlabel("Genomic position (bp, concatenated)")
        plt.tight_layout()
        plt.savefig(output.plot, format='pdf')

rule plot_bigwig_track_per_scaffold:
    """
    For scaffolds ≥1 Mbp, plot bigWig-like kmer/telomere tracks stacked vertically.
    Each scaffold is plotted separately, left-aligned, and to scale.
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        kmers = expand(config["tool"] + "/output/{{nom}}/{{nom}}_kmer_{kmer}.bw",
                        kmer = config["kmers"]),
        telos = expand(config["tool"] + "/output/{{nom}}/{{nom}}_teloKmer_{kmer}.bw",
                     kmer = flatten(config["telomere_strands"].values())),
        chromsizes = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    output:
        plot = config["tool"] + "/output/{nom}/plots/{nom}_stacked_per_scaffold.pdf"
    run:
        plt.rcParams['pdf.fonttype'] = 42
        plt.rcParams['ps.fonttype'] = 42
        os.makedirs(os.path.dirname(output.plot), exist_ok=True)

        # Load scaffold sizes
        chroms = []
        chrom_lens = []
        with open(input.assem) as handle:
            for record in SeqIO.parse(handle, "fasta"):
                if len(record.seq) < minchromsize:
                    continue  # Skip scaffolds smaller than 1 Mbp
                chroms.append(record.id)
                chrom_lens.append(len(record.seq))
        max_len = max(chrom_lens)

        # Sort tracks by label
        def extract_kmer_only(label):
            return label.split("_")[-1]  # works for both "kmer_X" and "telo_Y"

        track_info = sorted(
            zip(
                input.kmers + input.telos,
                [f"kmer_{os.path.basename(f).split('_kmer_')[-1].replace('.bw', '')}" for f in input.kmers] +
                [f"telo_{os.path.basename(f).split('_teloKmer_')[-1].replace('.bw', '')}" for f in input.telos]
            ),
            key=lambda x: extract_kmer_only(x[1])
        )

        all_tracks, track_labels = zip(*track_info)
        n_tracks = len(all_tracks)

        # Calculate vertical space needed
        fig = plt.figure(figsize=(12, len(chroms) * (0.3 + 0.25 * (n_tracks + 1))))

        x_margin = 0.10
        y_margin = 0.02
        track_height = 0.2 / len(chroms)  # control vertical spacing
        bar_height = 0.05 / len(chroms)
        y_space = (track_height * n_tracks + bar_height + y_margin)

        for i, (chrom, chrom_len) in enumerate(zip(chroms, chrom_lens)):
            width_frac = 0.85 * (chrom_len / max_len)
            x0 = x_margin
            y_base = 1 - ((i + 1) * y_space)

            # Plot tracks
            for j, (track_path, label) in enumerate(zip(all_tracks, track_labels)):
                ax = fig.add_axes([x0, y_base + j * track_height, width_frac, track_height])
                ax.set_facecolor("none")

                bw = pyBigWig.open(track_path)
                if chrom not in bw.chroms():
                    print(f"Warning: {chrom} not in {track_path}", file=sys.stderr)
                    bw.close()
                    continue

                chrom_len = min(chrom_len, bw.chroms()[chrom])
                vals = np.array(bw.values(chrom, 0, chrom_len))  # keep NaNs!
                x = np.arange(chrom_len)
                valid = ~np.isnan(vals)
                bw.close()

                if np.any(valid):
                    ax.plot(x[valid], vals[valid], lw=0.4, clip_on=False)

                # Clean up axes
                ax.set_xlim(0, chrom_len)
                ymax = max(10, max(vals) * 1.1 if np.any(vals) else 1)
                ax.set_ylim(0, ymax)
                ax.set_yticks([ymax/2, ymax])
                ax.set_yticklabels([label, round(ymax)], fontsize=5)
                ax.tick_params(axis='y', length=0)
                ax.set_xticks([])
                ax.spines[:].set_visible(False)

            # Plot black bar with ticks + chromosome label
            ax_bar = fig.add_axes([x0, y_base - bar_height, width_frac, bar_height])
            ax_bar.set_xlim(0, chrom_len)
            ax_bar.set_ylim(0, 1)
            ax_bar.hlines(0.5, 0, chrom_len, color="black", lw=3)
            ax_bar.set_yticks([])

            ax_bar.set_xticks([0, chrom_len])
            ax_bar.set_xticklabels(["0", f"{chrom_len:,}"], fontsize=6)

            ax_bar.spines[:].set_visible(False)
            ax_bar.tick_params(axis='x', length=2, labelsize=6)
            ax_bar.set_xlabel(chrom, fontsize=8, labelpad=3, loc='center')

        fig.text(0.5, 0.01, 'Genomic position (bp)', ha='center', fontsize=10)
        fig.savefig(output.plot, format="pdf")