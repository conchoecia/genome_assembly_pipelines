"""
Filename: GAP_NCBI_fcs_adaptor_trim
Author: dts (github: @conchoecia)
Date created: July 25th, 2023

Description:
  - This sets up and runs the NCBI tool to trim adaptors
      and other vectors from the reads.

  - The config file must be set up in the following way that allows multiple
      assemblies to be run at the same time.
"""

configfile: "config.yaml"
config["tool"] = "GAP_NCBI_fcs_adaptor_trim"

import os

# set up some filepaths that will be used later in the script
# filepath is the path of the directory that the snakefile is in
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))

# check if the config has the only field that we need
if "assemblies" not in config:
    raise IOError("You must have the field 'assemblies' in the config.yaml.")

# now go through each genome and make sure it is there
for thisassem in config["assemblies"]:
    # check if the name is "legal"
    if "_" in thisassem:
        raise IOError("You must not have any special characters in the assembly names: {}. Just use [A-Za-z0-9]+".format(thisassem))
    # check if the assembly file actually exists
    if not os.path.exists(config["assemblies"][thisassem]):
        raise IOError("The assembly file {} does not exist.".format(config["assemblies"][thisassem]))
    # change to absolute paths 
    config["assemblies"][thisassem] = os.path.abspath(config["assemblies"][thisassem])



wildcard_constraints:
    assem="[A-Za-z0-9]+"

rule all:
    input:
        # get the reports
        expand(config["tool"] + "/round-3-contam_detection/{assem}_round_3_trimmed.fasta",
                assem = config["assemblies"])


rule install_fcs_adaptor:
    """
    This rule installs the NCBI tool to trim adapters.

    This tool requires Docker.
    """
    output:
        fcstool  = os.path.join(filepath, "../bin/fcs-adaptor/run_fcsadaptor.sh") 
    params:
        fcsdirec = os.path.join(filepath, "../bin/fcs-adaptor/")
    threads: 1
    resources:
        mem_mb = 1000
    shell:
        """
        mkdir -p {params.fcsdirec}
        # curl but save to a specific directory
        curl -LO https://github.com/ncbi/fcs/raw/main/dist/run_fcsadaptor.sh
        mv run_fcsadaptor.sh {params.fcsdirec}
        """ 
    
rule perform_fcs_analysis_round1:
    """
    This step sets up the FCS run and performs the analysis
    """
    input:
        fcstool    = os.path.join(filepath, "../bin/fcs-adaptor/run_fcsadaptor.sh"),
        trimscript = os.path.join(filepath, "../scripts/NCBI_fcs_adapter_break.py"),
        assembly   = lambda wildcards: config["assemblies"][wildcards.assem]
    output:
        output_report    = config["tool"] + "/round-1-contam_detection/{assem}_round_1_fcs_adaptor_report.txt",
        trimmed_assembly = config["tool"] + "/round-1-contam_detection/{assem}_round_1_trimmed.fasta"
    params:
        report_dir = config["tool"] + "/round-1-contam_detection/"
    threads: 1
    resources:
        mem_mb = 2000
    shell:
        """
        mkdir -p {wildcards.assem}_TEMP
        mkdir -p {params.report_dir}
        cd {wildcards.assem}_TEMP
        bash {input.fcstool} --fasta-input {input.assembly} --output-dir ./ --euk
        mv ./fcs_adaptor_report.txt ../{output.output_report}
        cd ..
        python {input.trimscript} -f {input.assembly} -c {output.output_report} > {output.trimmed_assembly}
        """

rule perform_fcs_analysis_round2:
    """
    This step sets up the FCS run and performs the analysis
    """
    input:
        fcstool    = os.path.join(filepath, "../bin/fcs-adaptor/run_fcsadaptor.sh"),
        trimscript = os.path.join(filepath, "../scripts/NCBI_fcs_adapter_break.py"),
        assembly   = config["tool"] + "/round-1-contam_detection/{assem}_round_1_trimmed.fasta"
    output:
        output_report    = config["tool"] + "/round-2-contam_detection/{assem}_round_2_fcs_adaptor_report.txt",
        trimmed_assembly = config["tool"] + "/round-2-contam_detection/{assem}_round_2_trimmed.fasta"
    params:
        report_dir = config["tool"] + "/round-2-contam_detection/"
    threads: 1
    resources:
        mem_mb = 2000
    shell:
        """
        mkdir -p {wildcards.assem}_TEMP
        mkdir -p {params.report_dir}
        cd {wildcards.assem}_TEMP
        bash {input.fcstool} --fasta-input ../{input.assembly} --output-dir ./ --euk
        mv ./fcs_adaptor_report.txt ../{output.output_report}
        cd ..
        python {input.trimscript} -f {input.assembly} -c {output.output_report} > {output.trimmed_assembly}
        """

rule perform_fcs_analysis_round3:
    """
    This step sets up the FCS run and performs the analysis
    """
    input:
        fcstool    = os.path.join(filepath, "../bin/fcs-adaptor/run_fcsadaptor.sh"),
        trimscript = os.path.join(filepath, "../scripts/NCBI_fcs_adapter_break.py"),
        assembly   = config["tool"] + "/round-2-contam_detection/{assem}_round_2_trimmed.fasta"
    output:
        output_report    = config["tool"] + "/round-3-contam_detection/{assem}_round_3_fcs_adaptor_report.txt",
        trimmed_assembly = config["tool"] + "/round-3-contam_detection/{assem}_round_3_trimmed.fasta"
    params:
        report_dir = config["tool"] + "/round-3-contam_detection/"
    threads: 1
    resources:
        mem_mb = 2000
    shell:
        """
        mkdir -p {wildcards.assem}_TEMP
        mkdir -p {params.report_dir}
        cd {wildcards.assem}_TEMP
        bash {input.fcstool} --fasta-input ../{input.assembly} --output-dir ./ --euk
        mv ./fcs_adaptor_report.txt ../{output.output_report}
        cd ..
        python {input.trimscript} -f {input.assembly} -c {output.output_report} > {output.trimmed_assembly}
        """