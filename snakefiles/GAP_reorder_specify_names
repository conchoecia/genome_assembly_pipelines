"""
This snakefile takes an input fasta file,
  outputs scaffolds in the name and order as specified,
  otherwise it sorts the scaffolds from longest to shortest,
  then outputs a new fasta file with all of those
  scaffolds renamed sca1, sca2, ... scaN

This program uses a lot of RAM in favor of speed.
"""
import subprocess
configfile: "config.yaml"
config["tool"] = "GAP_reorder_specify_names"

if "sort_scaffolds" not in config:
    config["sort_scaffolds"] = True

# ensure that scaf_to_name or scaf_to_name_csv in the config file
if ("scaf_to_name" not in config) and ("scaf_to_name_csv" not in config):
    raise ValueError("You must provide either scaf_to_name or scaf_to_name_csv in the config file")

# the config should not contain both scaf_to_name and scaf_to_name_csv
if ("scaf_to_name" in config) and ("scaf_to_name_csv" in config):
    raise ValueError("You cannot provide both scaf_to_name and scaf_to_name_csv in the config file")

rule all:
    input:
        expand(config["tool"] + "/output/assembly/{nom}_output.fasta",
               nom=config["assemblies"]),
        expand(config["tool"] + "/output/assembly/{nom}_output.gff",
               nom=config["assemblies"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

rule fai_index_assemblies:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
    output:
        fai = temp(config["tool"] + "/input/assembly/{nom}_input.fasta.fai")
    shell:
        """
        samtools faidx {input.assem}
        """

rule get_sort_list:
    """
    sort the fai file to figure out the longest scaffolds
    """
    input:
        fai = config["tool"] + "/input/assembly/{nom}_input.fasta.fai"
    output:
        sort_list = temp(config["tool"] + "/input/sort_list/{nom}_sort_list.txt")
    threads: 1
    shell:
        """
        sort -k2 -nr {input.fai} | cut -f1,2 > {output.sort_list}
        """

rule reorder_fasta:
    """
    this reorders the fasta files based on the length
    """
    input:
        assem     = config["tool"] + "/input/assembly/{nom}_input.fasta",
        fai       = config["tool"] + "/input/assembly/{nom}_input.fasta.fai",
        sort_list = config["tool"] + "/input/sort_list/{nom}_sort_list.txt"
    output:
        assem = config["tool"] + "/output/assembly/{nom}_output.fasta",
        gff   = config["tool"] + "/output/assembly/{nom}_output.gff"
    threads: 1
    run:
        from Bio import SeqIO
        # set up the run
        unprinted = {}
        already_printed = set()
        old_to_new = {}
        old_to_orientation = {}
        for record in SeqIO.parse(input.assem, "fasta"):
            unprinted[record.id] = record
        outhandle = open(output.assem, "w")

        # now print out the specified scaffolds
        if "scaf_to_name_csv" in config:
            # the file is simply "oldname,newname,orientation"
            # orientation is + or -
            # if +, the sequence is printed as is
            # if -, the reverse complement is printed
            import csv
            seen_in_file = set()
            with open(config["scaf_to_name_csv"], "r") as csvfile:
                reader = csv.reader(csvfile)
                config["scaf_to_name"] = []
                for row in reader:
                    if len(row) != 3:
                        raise IOError("Each row of the csv file must have exactly three columns")
                    if row[0] in seen_in_file:
                        raise IOError("The oldname {} appears more than once in the csv file".format(row[0]))
                    seen_in_file.add(row[0])
                    config["scaf_to_name"].append((row[0], row[1], row[2]))

        # if the scaf_to_name entry doesn't have orientation, add a + to everything
        for i, entrypair in enumerate(config["scaf_to_name"]):
            if len(entrypair) == 2:
                config["scaf_to_name"][i] = (entrypair[0], entrypair[1], "+")
            elif len(entrypair) == 3:
                if entrypair[2] not in ["+", "-"]:
                    raise IOError("Orientation must be either + or -")
            else:
                raise IOError("Each entry in scaf_to_name must have either two or three entries")

        # now print out the specified scaffolds
        for entrypair in config["scaf_to_name"]:
            if not entrypair[0] in unprinted:
                raise IOError(entrypair[0] + " not in dict. Check that you didn't put the same sequence header twice in the rename config.yaml file.")
            old_to_new[entrypair[0]] = entrypair[1]
            unprinted[entrypair[0]].id          = old_to_new[entrypair[0]]
            unprinted[entrypair[0]].description = old_to_new[entrypair[0]]
            if entrypair[2] == "-":
                unprinted[entrypair[0]].seq = unprinted[entrypair[0]].seq.reverse_complement()
            SeqIO.write(unprinted[entrypair[0]], outhandle, 'fasta')
            del unprinted[entrypair[0]]
            already_printed.add(entrypair[0])

        # get the sort list depending on whether things will be lensorted
        sort_list = []
        scacounter = 1
        if config["sort_scaffolds"]:
            # print them out based on seq length
            with open(input.sort_list, "r") as f:
                for line in f:
                    line = line.strip()
                    if line:
                        scaf   = line.split()[0]
                        if scaf in already_printed:
                            pass
                        else:
                            old_to_new[scaf]            = "sca{}".format(scacounter)
                            sort_list.append(scaf)
                            scacounter += 1
        else:
            # just print them out as they occur in the fasta file
            for record in SeqIO.parse(input.assem, "fasta"):
                if record.id in already_printed:
                    pass
                else:
                    old_to_new[record.id] = "sca{}".format(scacounter)
                    sort_list.append(record.id)
                    scacounter += 1

        # now print out everything else
        for scaf in sort_list:
            unprinted[scaf].id          = old_to_new[scaf]
            unprinted[scaf].description = old_to_new[scaf]
            SeqIO.write(unprinted[scaf], outhandle, 'fasta')
            del unprinted[scaf]
        outhandle.close()
        # we're done with the new assembly now.
        # now rename the gff file if it exists. If not, just print a blank file.
        outhandle = open(output.gff, "w")
        if "gff" in config:
            if os.path.exists(config["gff"]):
                inhandle = open(config["gff"], "r")
                for line in inhandle:
                    line = line.strip()
                    if line:
                        if line[0] == "#":
                            # we know that this is a comment line. Replace everything that we see that can be replaced. 
                            fields = line.split(" ")
                            if "sequence-region" in fields[0]:
                                if fields[1] not in old_to_new:
                                    raise IOError("The scaffold {} in the gff is not in the assembly".format(fields[1]))
                                fields[1] = old_to_new[fields[1]]
                                print(" ".join(fields), file = outhandle)
                            else:
                                print(line, file = outhandle)
                        else:
                            # this must be an annotation line. Just change the scaffold
                            fields = line.split("\t")
                            if fields[0] not in old_to_new:
                                raise IOError("The scaffold {} in the gff is not in the assembly".format(fields[0]))
                            fields[0] = old_to_new[fields[0]]
                            print("\t".join(fields), file = outhandle)
            else:
                raise IOError("The gff file you specified in the config does not exist")
        else:
            print("no gff provided in the config file.", file = outhandle)
        outhandle.close()
