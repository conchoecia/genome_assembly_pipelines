"""
This snakefile maps all the HiC reads to a final genome assembly
  - It also makes a pretextmap file for quickly looking at the hic-maps
  - It also calculates the obs/exp matrix, and the pearson exp matrix of that
"""
from Bio import SeqIO
from Bio.SeqIO.FastaIO import FastaWriter
import os

import subprocess
minchromsize = 1000000
configfile: "config.yaml"

config["tool"] = "GAP_EDTA"

rule all:
    input:
        #expand(config["tool"] + "/input/{nom}_transcripts.fasta.transdecoder_dir/longest_orfs.cds",
        #       nom = config["assemblies"]),
        #expand(config["tool"] + "/input/longest_orfs.fasta",
        #       nom = config["assemblies"]),
        expand(config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.TEanno.gff3",
               nom = config["assemblies"]),
        # masked genome
        #expand(config["tool"] + "/input/assembly/{nom}_input.fasta.new.masked",
        expand(config["tool"] + "/output/{nom}.masked.fasta",
               nom = config["assemblies"])
        ##run EDTA on all the the genomes in the config file
        #expand(config["tool"] + "/output/EDTA/{nom}/{nom}_input.fasta.mod.EDTA.intact.gff3",
        #       nom = config["assemblies"])
        ##expand(config["tool"] + "/output/{nom}/{nom}_chromsize.txt",
        ##       nom = config["assemblies"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")

rule softlink_assembly:
    """softlink the assembly"""
    input:
        assem = lambda wildcards: os.path.abspath(config["assemblies"][wildcards.nom])
    output:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
    threads: 1
    shell:
        """
        ln -s {input.assem} {output.assem}
        """

rule concat_transcripts:
    """Concatenate all transcript FASTA files into one per assembly"""
    input:
        transcripts=lambda wildcards: config["transcripts"]
    output:
        combined=config["tool"] + "/input/transcripts.fasta"
    threads: 1
    run:
        import os
        from Bio import SeqIO

        os.makedirs(os.path.dirname(output.combined), exist_ok=True)

        with open(output.combined, "w") as outfile:
            for transcript_file in input.transcripts:
                for record in SeqIO.parse(transcript_file, "fasta"):
                    SeqIO.write(record, outfile, "fasta")

rule transdecoder_longorfs:
    """Run TransDecoder to extract CDS regions from transcripts"""
    input:
        transcripts=config["tool"] + "/input/transcripts.fasta"
    output:
        cds    = config["tool"] + "/input/longest_orfs.fasta"
    params:
        outdir = config["tool"] + "/input",
        cds    = config["tool"] + "/input/transcripts.fasta.transdecoder_dir/longest_orfs.cds",
        rmdir  = config["tool"] + "/input/transcripts.fasta.transdecoder_dir/"
    threads: workflow.cores
    shell:
        """
        TransDecoder.LongOrfs -t {input.transcripts} --output_dir {params.outdir}
        mv {params.cds} {output.cds}
        rm -rf {params.rmdir}
        """

rule run_EDTA:
    """
    make a file with the chromosome sizes
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        transcripts = config["tool"] + "/input/longest_orfs.fasta"
    output:
        intact = config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.intact.gff3",
        anno   = config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.TEanno.gff3",
        stats  = config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.TEanno.sum",
        RMout  = config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.anno/{nom}_input.fasta.mod.EDTA.RM.out"
    params:
        outdir1 = lambda wildcards: config["tool"] + "/output",
        outdir2 = lambda wildcards: config["tool"] + "/output/{}".format(wildcards.nom),
        log     = lambda wildcards: config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.log".format(nom=wildcards.nom)
    threads: workflow.cores
    shell:
        """
        mkdir -p {params.outdir1}
        mkdir -p {params.outdir2}
        cd {params.outdir2}
        EDTA.pl \
          --genome ../../../{input.assem} \
          --species others \
          --cds ../../../{input.transcripts} \
          --step all \
          --overwrite 1 \
          --force 1 \
          --sensitive 1 \
          --evaluate 1 \
          --anno 1 \
          --threads {threads} > ../../../{params.log} 2>&1;
        """

rule download_mask_script:
    """
    Download the EDTA softmasking script
    """
    output:
        script   = config["tool"] + "/input/make_masked.pl",
        subtract = config["tool"] + "/input/substract_parallel.pl",
        combine  = config["tool"] + "/input/combine_overlap.pl"
    threads: 1
    params:
        url = "https://raw.githubusercontent.com/oushujun/EDTA/refs/heads/master/bin/make_masked.pl",
        url2 = "https://raw.githubusercontent.com/oushujun/EDTA/refs/heads/master/bin/substract_parallel.pl",
        url3 = "https://raw.githubusercontent.com/oushujun/EDTA/refs/heads/master/bin/combine_overlap.pl"
    shell:
        """
        wget {params.url} -O {output.script}
        chmod +x {output.script}

        wget {params.url2} -O {output.subtract}

        wget {params.url3} -O {output.combine}
        """

rule softmask_genome:
    """
    Softmask the genome using the EDTA script
    """
    input:
        script = config["tool"] + "/input/make_masked.pl",
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        rmout = config["tool"] + "/output/{nom}/{nom}_input.fasta.mod.EDTA.anno/{nom}_input.fasta.mod.EDTA.RM.out"
    output:
        masked = config["tool"] + "/input/assembly/{nom}_input.fasta.new.masked"
    params:
        outdir = config["tool"] + "/input",
    threads: 1
    shell:
        """
        perl {input.script} -genome {input.assem} \
          -hardmask 0 \
          -rmout {input.rmout}
        """

rule reformat_fasta_wrap60:
    """
    Reformat FASTA file to 60-character line width using Bio.SeqIO
    """
    input:
        masked = config["tool"] + "/input/assembly/{nom}_input.fasta.new.masked"
    output:
        wrapped = config["tool"] + "/output/{nom}.masked.fasta"
    threads: 1
    run:
        with open(input.masked) as infile, open(output.wrapped, "w") as outfile:
            writer = FastaWriter(outfile, wrap=60)
            writer.write_file(SeqIO.parse(infile, "fasta"))