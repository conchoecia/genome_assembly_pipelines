"""
This snakefile maps all the HiC reads to a final genome assembly
  - It also makes a pretextmap file for quickly looking at the hic-maps
  - It also calculates the obs/exp matrix, and the pearson exp matrix of that
"""
from Bio import SeqIO
import subprocess
minchromsize = 1000000
configfile: "config.yaml"

#def get_chromosome_sizes(assembly_file, minsize):
#    """
#    returns a set of chromosomes to keep
#    """
#    chroms = []
#    with open(assembly_file) as handle:
#        for record in SeqIO.parse(handle, "fasta"):
#            if len(record.seq) >= minsize:
#                chroms.append(record.id)
#    return chroms

config["tool"] = "GAP_EDTA"

#def run_EDTA(commands):

rule all:
    input:
        #run EDTA on all the the genomes in the config file
        expand(config["tool"] + "/output/EDTA/{nom}/{nom}_input.fasta.mod.EDTA.intact.gff3",
               nom = config["assemblies"])
        #expand(config["tool"] + "/output/{nom}/{nom}_chromsize.txt",
        #       nom = config["assemblies"])

#for entry in config["assemblies"]:
#    print(config["assemblies"][entry]["transcripts"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")

rule softlink_assembly:
    """softlink the assembly"""
    input:
        assem = lambda wildcards: os.path.abspath(config["assemblies"][wildcards.nom]["assembly"])
    output:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
    threads: 1
    shell:
        """
        ln -s {input.assem} {output.assem}
        """

rule softlink_cds:
    """just softlink the transcripts so they're easier to refer to"""
    input:
        #assem = lambda wildcards: os.path.abspath(config["assemblies"][wildcards.nom])
        transcripts = lambda wildcards: os.path.abspath(config["assemblies"][wildcards.nom]["transcripts"])
    output:
        transcripts = config["tool"] + "/input/transcripts/{nom}_transcripts.fasta"
    threads: 1
    shell:
        """
        ln -s {input.transcripts} {output.transcripts}
        """

rule run_EDTA:
    """
    make a file with the chromosome sizes
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        transcripts = config["tool"] + "/input/transcripts/{nom}_transcripts.fasta"
    output:
        intact = config["tool"] + "/output/EDTA/{nom}/{nom}_input.fasta.mod.EDTA.intact.gff3",
        anno   = config["tool"] + "/output/EDTA/{nom}/{nom}_input.fasta.mod.EDTA.TEanno.gff3",
        stats  = config["tool"] + "/output/EDTA/{nom}/{nom}_input.fasta.mod.EDTA.TEanno.sum",
        log  =   config["tool"] + "/output/EDTA/{nom}/{nom}_input.fasta.mod.EDTA.log"
    params:
        outdir1 = lambda wildcards: config["tool"] + "/output",
        outdir2 = lambda wildcards: config["tool"] + "/output/EDTA",
        outdir3 = lambda wildcards: config["tool"] + "/output/EDTA/{}".format(wildcards.nom)
    threads: 20
    run:
        cmd = """
              mkdir -p {};
              mkdir -p {};
              mkdir -p {};
              cd {};
              EDTA.pl --genome ../../../../{} \
                --cds ../../../../{} \
                --overwrite 1 \
                --force 1 \
                --sensitive 1 \
                --anno 1 \
                --evaluate 1 \
                --threads {} > ../../../../{} 2>&1;
              cd ../../../../
              """.format(params.outdir1, params.outdir2, params.outdir3, params.outdir3,
                         input.assem, input.transcripts, threads, output.log)
        subprocess.run(cmd, shell = True)
