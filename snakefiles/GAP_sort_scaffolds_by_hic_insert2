"""
This snakefile sorts small scaffolds in a genome assembly based on their best
  possible location relative to the chromosome-scale scaffolds. This makes it
  easier later to curate the assembly.

The chromosomes must be specified in the config file like this:

chromosomes:
  - Scaffold1
  - Scaffold2
  - Scaffold3
  - Chr4
  - Chr_et_cetera

The output of this snakefile is a fasta file in which the chromosome-scale
  scaffolds are in the order specified in the config, and the small scaffolds
  are sorted.
"""

from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

import gzip
import os
import pandas as pd
import sys
minchromsize = 1000000
configfile: "config.yaml"
config["tool"] = "GAP_sort_scaffolds_by_hic_insert"
config["binsize"] = [50000]
qvals = [0]

for x in config["assemblies"]:
    if "_" in x:
        raise IOError("You must not have any special characters in the assembly names: {}. Just use [A-Za-z0-9]+".format(x))

if "chromosomes" not in config:
    raise IOError("You must specify chromosomes in the config file.")
if "min_insert_size" not in config:
    raise IOError("You must specify the min_insert_size in the config. The min size of the scaffold to insert.")
if type(config["min_insert_size"]) != int:
    raise IOError("The min_insert_size must be an integer.")
if "strength_fraction" not in config:
    raise IOError("You must specify the strength fraction. The fraction of the scaffolds based on Hi-C strength that you want to insert.")
if type(config["strength_fraction"]) != list:
    raise IOError("The strength_fraction must be a list of floats. Set up the config.yaml file like so with whatever values you would like: 'strength_fraction: [0.25, 0.5, 0.75]'")

filepath = os.path.dirname(os.path.realpath(workflow.snakefile))

def flatten(list_of_lists):
    if len(list_of_lists) == 0:
        return list_of_lists
    if isinstance(list_of_lists[0], list):
        return flatten(list_of_lists[0]) + flatten(list_of_lists[1:])
    return list_of_lists[:1] + flatten(list_of_lists[1:])


def get_chromosome_sizes(assembly_file, minsize):
    """
    returns a set of chromosomes to keep
    """
    chroms = []
    with open(assembly_file) as handle:
        for record in SeqIO.parse(handle, "fasta"):
            if len(record.seq) >= minsize:
                chroms.append(record.id)
    return chroms

wildcard_constraints:
    datatype="[A-Za-z0-9]+",
    kmer="[A-Za-z0-9]+",
    nom="[A-Za-z0-9.]+",
    telo="[A-Za-z0-9]+",
    binsize="[0-9]+",
    qval="[0-9]+",
    telodir="[fr]"

rule all:
    input:
        # chromsize
        expand(config["tool"] + "/output/{nom}/{nom}_chromsize.txt",
               nom = config["assemblies"]),
        expand(config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.tsv",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"]),
        expand(config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.nonchroms.best.tsv",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"]),
        # now generate the assembly
        expand(config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_output.fasta",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"], fraction=config["strength_fraction"]),
        expand(config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_inserted_scaffolds.tsv",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"], fraction=config["strength_fraction"]),
        expand(config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_appended_scaffolds.tsv",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"], fraction=config["strength_fraction"]),
        expand(config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_unseen_scaffolds.txt",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"], fraction=config["strength_fraction"]),
        expand(config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_insertion_stats.tsv",
               nom = config["assemblies"], qval = qvals, binsize=config["binsize"], fraction=config["strength_fraction"]),

        #TESTING
        #expand(config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.TEST.tsv",
        #       nom = config["assemblies"], qval = qvals, binsize=config["binsize"])

# make softlinks of the input files
# files end up here:
#   assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
filepath = os.path.dirname(os.path.realpath(workflow.snakefile))
softlinks_rule_path=os.path.join(filepath, "snakemake_includes/assembly_softlinks")
include: softlinks_rule_path

rule chrom_size:
    """
    make a file with the chromosome sizes
    """
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
        bioawk = os.path.join(filepath, "../bin/bioawk/bioawk")
    output:
        cs = config["tool"] + "/output/{nom}/{nom}_chromsize.txt"
    threads: 1
    shell:
        """
        {input.bioawk} -cfastx '{{printf("%s\\t%d\\n", $name, length($seq))}}' {input.assem} > {output.cs}
        """

#      _ ___   _ _____     _    _       __ _ _
#   _ | | _ ) /_\_   _|   | |_ (_)__   / _(_) |___ ___
#  | || | _ \/ _ \| |    _| ' \| / _| |  _| | / -_|_-<
#   \__/|___/_/ \_\_|   (_)_||_|_\__| |_| |_|_\___/__/
#
rule compile_chromap:
    """
    compile chromap if it does not yet exist
    """
    output:
        chromap = os.path.join(filepath, "../bin/chromap/chromap")
    params:
        mvdir = os.path.join(filepath, "../bin/chromap/")
    threads: 1
    shell:
        """
        rm -rf ./chromap
        git clone https://github.com/haowenz/chromap.git
        cd chromap
        make
        cd ..
        rsync -r chromap/ {params.mvdir}
        rm -rf ./chromap
        """

rule compile_bioawk:
    """
    build bioawk if it does not yet exist. Requires gcc, a YACC-compatible parser, and zlib.
    """
    output:
        bioawk = os.path.join(filepath, "../bin/bioawk/bioawk")
    params:
        mvdir = os.path.join(filepath, "../bin/")
    threads: 1
    shell:
        """
        git clone https://github.com/lh3/bioawk.git
        cd bioawk
        make
        cd ..
        mv bioawk/ {params.mvdir}
        """

rule index_ref:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        chromap = os.path.join(filepath, "../bin/chromap/chromap")
    output:
        index = temp(config["tool"] + "/input/assembly/{nom}_input.fasta.index")
    shell:
        """
        {input.chromap} -i -r {input.assem} -o {output.index}
        """

rule hic_to_pairs:
    input:
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta",
        index   = config["tool"] + "/input/assembly/{nom}_input.fasta.index",
        chromap = os.path.join(filepath, "../bin/chromap/chromap"),
        left  = flatten([config["libs"][x]["read1"] for x in config["libs"]]),
        right = flatten([config["libs"][x]["read2"] for x in config["libs"]])
    output:
        pairs = config["tool"] + "/output/pairs/{nom}/{nom}_q_{qval}.pairs"
    params:
        left  = " -1 ".join(flatten([config["libs"][x]["read1"] for x in config["libs"]])),
        right = " -2 ".join(flatten([config["libs"][x]["read2"] for x in config["libs"]])),
        qval  = lambda wildcards: wildcards.qval
    threads: workflow.cores - 2
    shell:
        """
        {input.chromap} --preset hic -x {input.index} \
            -r {input.assem} \
            -1 {params.left}  \
            -2 {params.right} \
            -t {threads} \
            -q {params.qval} \
            -o {output.pairs}
        """

def pairs_to_counts(pairs_file, binsize, output_file):
    """
    reads in a pairs file and saves a counts file

    input looks like this:
    ## pairs format v1.0.0
    #shape: upper triangle
    #chromsize: c1 26206493
    #chromsize: c2 23028209
    #chromsize: c3 21284423
    #chromsize: c4 16326010
    #chromsize: c5 23637599
    #chromsize: sca332 2526
    #chromsize: sca333 1772
    #chromsize: Binf1_mitogenome 10476
    #columns: readID chrom1 pos1 chrom2 pos2 strand1 strand2 pair_type
    E00521:324:HC73WCCX2:4:2103:31487:71506 c1      24      c1      167     +       -       UU
    E00521:324:HC73WCCX2:4:2213:14336:42323 c1      25      c1      181     +       -       UU
    E00521:324:HC73WCCX2:4:1206:18964:4983  c1      25      c1      457     +       -       UU
    E00521:324:HC73WCCX2:5:2201:18406:8904  c1      41      c1      190     +       -       UU
    E00521:324:HC73WCCX2:4:1215:9638:9326   c1      41      c1      938243  +       +       UU

    output looks like this:
    c1      0       50000   c1      0       50000   31880
    c1      0       50000   c1      50000   100000  526
    c1      0       50000   c1      100000  150000  26
    c1      0       50000   c1      150000  200000  22
    c1      0       50000   c1      200000  250000  36
    c1      0       50000   c1      250000  300000  52
    c1      0       50000   c1      300000  350000  39
    c1      0       50000   c1      350000  400000  78
    c1      0       50000   c1      400000  450000  57
    c1      0       50000   c1      450000  500000  44
    c1      0       50000   c1      500000  550000  73
    """
    chrom_to_size = {}
    chrom_order = []
    counts = {}
    counter = 0
    with open(pairs_file, "r") as f:
        for line in f:
            line = line.strip()
            if line:
                if line.startswith("#"):
                    if line.startswith("#chromsize: "):
                        fields = line.split()
                        chrom = fields[1]
                        size = int(fields[2])
                        chrom_to_size[chrom] = size
                        chrom_order.append(chrom)
                else:
                    # E00521:324:HC73WCCX2:4:2213:14336:42323 c1      25      c1      181     +       -       UU
                    # fields1 is chrom1
                    # fields2 is chrom1 pos
                    # fields3 is chrom2
                    # fields4 is chrom2 pos
                    fields = line.split("\t")
                    c1    = fields[1]
                    c1pos = int(int(fields[2])/binsize)
                    c2    = fields[3]
                    c2pos = int(int(fields[4])/binsize)

                    if c1 not in counts:
                        counts[c1] = {}
                    if c1pos not in counts[c1]:
                        counts[c1][c1pos] = {}
                    if c2 not in counts[c1][c1pos]:
                        counts[c1][c1pos][c2] = {}
                    if c2pos not in counts[c1][c1pos][c2]:
                        counts[c1][c1pos][c2][c2pos] = 0
                    counts[c1][c1pos][c2][c2pos] += 1

                    if counter % 1000 == 0:
                        print("  processed {} lines    ".format(counter), end = "\r")
                    counter += 1

    outhandle = open(output_file, "w")
    for c1 in [x for x in chrom_order if x in counts]:
        for c1pos in sorted(counts[c1]):
            for c2 in [x for x in chrom_order if x in counts[c1][c1pos]]:
                for c2pos in sorted(counts[c1][c1pos][c2]):
                    c1start = c1pos * binsize
                    c2start = c2pos * binsize
                    c1end = c1pos * binsize
                    c2end = c2pos * binsize
                    if chrom_to_size[c1] < c1end:
                        c1end = chrom_to_size[c1]
                    if chrom_to_size[c2] < c2end:
                        c2end = chrom_to_size[c2]
                    print("{}\t{}\t{}\t{}\t{}\t{}\t{}".format(
                        c1, c1start, c1end,
                        c2, c2start, c2end,
                        counts[c1][c1pos][c2][c2pos]),
                          file = outhandle)
    outhandle.close()

rule python_pairs_to_map:
    input:
        pairs = config["tool"] + "/output/pairs/{nom}/{nom}_q_{qval}.pairs"
    output:
        hicm = config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.tsv"
    params:
        binsize = lambda wildcards: int(wildcards.binsize)
    run:
        pairs_to_counts(input.pairs, params.binsize, output.hicm)

# random stuff
#  ___              _                _         __  __
# | _ \__ _ _ _  __| |___ _ __    __| |_ _  _ / _|/ _|
# |   / _` | ' \/ _` / _ \ '  \  (_-<  _| || |  _|  _|
# |_|_\__,_|_||_\__,_\___/_|_|_| /__/\__|\_,_|_| |_|
#

rule hicmatrix_nonchroms:
    """
    Gets rid of the rows in the matrix that are chrom-chrom interactions or
      scaf-scaf interactions. These aren't useful for sorting.
    """
    input:
        hicm = config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.tsv"
    output:
        hicm = config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.nonchroms.tsv"
    threads: 1
    run:
        outhandle = open(output.hicm, "w")
        with open(input.hicm, "r") as f:
            for line in f:
                line = line.strip()
                if line:
                    fields = line.split()
                    s1 = True if fields[0] in config["chromosomes"] else False
                    s2 = True if fields[3] in config["chromosomes"] else False
                    printme = True
                    if s1 and s2:
                        printme = False
                    elif not s1 and not s2:
                        printme = False
                    if printme:
                        # this always prints the chromosome in the second column
                        if s1:
                            linemod = "\t".join([str(x) for x in [
                                 fields[3], fields[4], fields[5],
                                 fields[0], fields[1], fields[2], fields[6]
                                                                 ]])
                            print(linemod, file = outhandle)
                        elif s2:
                            print(line, file = outhandle)
                        else:
                            raise IOError("Shouldn't be here")

rule summarize_matrix_by_chromosome_coordinate:
    """
    Each scaffold must now be represented by a single value along the axis of
      chromosome coordinates.

    fields are:
      1: scaffold
      2: scaffold size
      3: chromosome
      4: chromosome start
      5; chromosome stop
      6: window_count
      7: rolling_window_count
      8: window area
      9: count_per_bases_squared
    """
    input:
        hicm = config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.nonchroms.tsv",
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        hicm = config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.nonchroms.best.tsv"
    threads: 1
    run:
        # first, get the scaffold to size
        scaf_to_size = {}
        with open(input.assem, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta"):
                scaf_to_size[record.id] = len(record.seq)

        df = pd.read_csv(input.hicm, sep = "\t", header = None)
        df.columns = ["scaf", "start", "stop", "chrom", "cstart", "cstop", "count"]
        grouped_df = df.groupby(["scaf", "chrom", "cstart", "cstop"], as_index = False)["count"].sum()

        gb = grouped_df.groupby(["scaf", "chrom"], as_index = False)

        keeps = []
        for name, group in gb:
            # This makes a rolling window sum of the counts to get a more accurate
            #  estimate of the best position. It centers the value and sums up
            # 10 windows around it.
            pd.set_option('display.max_rows', 5000)
            group["window"] = group["count"].shift(-4).rolling(7).sum().fillna(0)
            temp = group.sort_values(["window", "count"], ascending = [False, False])
            keeps.append(temp.iloc[0])

        newdf = pd.DataFrame(keeps, columns=["scaf", "chrom", "cstart", "cstop", "count", "window"])
        newdf = newdf.reset_index(drop = True)

        # get the best chrom for each scaffold
        gb = newdf.groupby(["scaf"], as_index = False)
        keeps = []
        for name, group in gb:
            temp = group.sort_values(["window", "count"], ascending = [False, False])
            keeps.append(temp.iloc[0])

        newdf = pd.DataFrame(keeps, columns=["scaf", "chrom", "cstart", "cstop", "count", "window"])
        newdf = newdf.sort_values(["chrom", "cstart", "cstop"], ascending = [True, True, True])
        newdf = newdf.reset_index(drop = True)

        # modify each row
        newdf["scafsize"] = newdf["scaf"].map(scaf_to_size)
        newdf["area"] = 0
        newdf["count_per_MB_squared"] = 0
        for index, row in newdf.iterrows():
            thissize = row["scafsize"]
            if row["scafsize"] >= (7 * config["binsize"][0]):
                thissize = (7 * config["binsize"][0])
            thisarea = (thissize * config["binsize"][0])/1000000
            thiscount = row["window"] / thisarea
            newdf.loc[index, "area"] = thisarea
            newdf.loc[index, "count_per_bases_squared"] = thiscount

        newdf = newdf[["scaf", "scafsize", "chrom", "cstart", "cstop", "count",
                       "window", "area", "count_per_bases_squared"]]

        newdf.to_csv(output.hicm, sep = "\t", index = None)

class Chromosome:
    """
    This takes in a seqio record object.
    First construct the object, providing a SeqIO record,
      the minimum gap length to consider as a gap,
      and the size of the gaps when printing out.

    - Then add new contigs with .insert()
    - Then add contigs that correspond to chromosomes, but don't have
       a place with .append()
    - Then run gen_chrom to set self.SeqRecord
    - Then you can acces the SeqRecord of the object to print it out.
    """
    def __init__(self, record, min_gap_len, new_gap_length):
        self.new_gap_length = new_gap_length
        self.min_gap_len    = 10
        self.min_gap        = "".join(self.min_gap_len * ["N"])
        self.name           = record.name
        self.contig_ranges  = self.contig_ranges(str(record.seq).replace("n", "N"),
                                                 self.min_gap)
        self.contigs        = [str(record.seq[start:stop]) for start, stop in self.contig_ranges]
        self.inserts        = {}
        self.insertscopy    = {}
        # These are SeqIO records.
        #  They are just printed out in the order they are added.
        self.non_inserted_scafs = []
        # These are things that come out after we print
        self.new_contigs    = []
        self.chromosome_seq = ""
        self.SeqRecord = None

    def gen_chrom(self):
        """
        returns a string of the scaffold
        """
        self.insertscopy = {key: self.inserts[key] for key in self.inserts}

        thisseq = []
        for i in range(len(self.contig_ranges)):
            # get all the scaffolds that have their best match up until the middle
            #  of the scaffold
            #print(self.contig_ranges[i])
            max_front = (((self.contig_ranges[i][1] - self.contig_ranges[i][0])/2) + self.contig_ranges[i][0]) + 1
            del_these = []
            for key in self.inserts:
                if key < max_front:
                    for seq in self.inserts[key]:
                        thisseq.append(seq)
                    del_these.append(key)
            for del_this in del_these:
                del self.inserts[del_this]

            # now add the chromosome contig
            thisseq.append(self.contigs[i])

            # now add the scaffolds that map from the middle to the end of the contig
            max_front = self.contig_ranges[i][1] + 1
            del_these = []
            for key in self.inserts:
                if key < max_front:
                    for seq in self.inserts[key]:
                        thisseq.append(seq)
                    del_these.append(key)
            for del_this in del_these:
                del self.inserts[del_this]

            # if we're at the end, just add everything else to the scaffold
            del_these = []
            if i == len(self.contig_ranges):
                for key in self.inserts:
                    for seq in self.inserts[key]:
                        thisseq.append(seq)
                    del_these.append(key)
            for del_this in del_these:
                del self.inserts[del_this]

        # make sure that we've handled all the inserts
        if len(self.inserts) > 0:
            print(["{} {}".format(k,len(self.inserts[k])) for k in self.inserts])
            raise IOError("We didn't insert all of the scaffolds into the chrom")

        self.new_contigs = thisseq
        gapseq = "".join(["N"] * self.new_gap_length)
        self.chromosome_seq = gapseq.join(self.new_contigs)

        # copy
        self.inserts = {key: self.insertscopy[key] for key in self.insertscopy}
        self.SeqRecord = SeqRecord(Seq(self.chromosome_seq), id=self.name)

    def insert(self, seq, best_loc):
        if best_loc not in self.inserts:
            self.inserts[best_loc] = []
        self.inserts[best_loc].append( seq )

    def append(self, record):
        self.non_inserted_scafs.append(record)

    def contig_ranges(self, seq, sub):
        """
        This script takes in a sequence and determines out the
         ranges to get the contigs.
        """
        indices = list(self.find_all(seq, sub))
        gap_starts = []
        gap_stops  = []
        gap_ranges = []
        prev = -1

        # get the starts of the gaps
        for i in range(len(indices)):
            if prev != indices[i] - 1:
                gap_starts.append(indices[i])
            prev = indices[i]

        # get the indices of the ends of the gaps
        prev = 999999999999
        for i in range(len(indices) - 1, -1, -1):
            if prev != indices[i] + 1:
                gap_stops.append(indices[i])
            prev = indices[i]
        gap_stops = [x + len(sub) for x in gap_stops[::-1]]

        contigs = []
        # now get the ranges
        for i in range(len(gap_stops)):
            gap_ranges.append([gap_starts[i], gap_stops[i]])
            if i == 0:
                contigs.append([0, gap_starts[i]])
                contigs.append([gap_stops[i], gap_starts[i+1]])
            elif i == (len(gap_stops) -1):
                contigs.append([gap_stops[i], len(seq)])
            else:
                contigs.append([gap_stops[i], gap_starts[i+1]])

        # If one chromosome is one scaffold after all this parsing, then we just add the start and stop
        #  This happens if one chromosome is one big contig.
        if len(contigs) == 0:
            contigs.append([0, len(seq)])
        return contigs

    def find_all(self, seq, sub):
        """
        https://stackoverflow.com/questions/4664850/how-to-find-all-occurrences-of-a-substring

        March 13 2023 - I am not sure what this does at the moment. This needs better documentation
        """
        start = 0
        indices = []
        while True:
            start = seq.find(sub, start)
            if start == -1: return
            yield start
            #start += len(sub) # use start += 1 to find overlapping matches
            start += 1 # use start += 1 to find overlapping matches
        return indices


rule output_sorted_fasta:
    """
    Outputs a new fasta file with the scaffolds sorted by best
     chromosome position
    """
    input:
        hicm  = config["tool"] + "/output/{nom}/text_hic_map/{nom}.q_{qval}.{binsize}.gi.nonchroms.best.tsv",
        assem = config["tool"] + "/input/assembly/{nom}_input.fasta"
    output:
        assem           = config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_output.fasta",
        inserted_scafs  = config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_inserted_scaffolds.tsv",
        appended_scafs  = config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_appended_scaffolds.tsv",
        unseen_scafs    = config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_unseen_scaffolds.txt",
        insertion_stats = config["tool"] + "/output/assembly/{nom}_q_{qval}_{binsize}_{fraction}FracBest_insertion_stats.tsv"
    params:
        min_insert_size   = config["min_insert_size"],
        new_gap_length    = config["new_gap_length"]
    threads: 1
    run:
        # put the record objects into a dictionary
        chrom_order        = [x for x in config["chromosomes"]]
        unseen_chromosomes = list(set([x for x in config["chromosomes"]]))
        unseen_scafs       = []
        if len(chrom_order) != len(unseen_chromosomes):
            raise IOError("You accidentally put duplicate chromosomes into the config")

        chromosome_dict  = {}
        scaffold_dict    = {}
        scaffold_order   = []
        with open(input.assem, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta"):
                if record.id in config["chromosomes"]:
                    unseen_chromosomes.remove(str(record.id))
                    chromosome_dict[record.id] = Chromosome(record, 10, params.new_gap_length)
                else:
                    scaffold_dict[record.id] = record
                    scaffold_order.append(record.id)
                    unseen_scafs.append(record.id)
        num_scaffolds = len(scaffold_dict)


        # potentially an error here. Read this message
        if len(unseen_chromosomes) > 0:
            raise IOError("You specified these chromosomes but they were not in the fasta file: {}".format(unseen_chromosomes))


        # read in the scafs
        df = pd.read_csv(input.hicm, sep = "\t")
        # get the quantile
        print("wildcards fraction is {}".format(wildcards.fraction))
        min_strength = float(df["count_per_bases_squared"].quantile(1 - float(wildcards.fraction)))

        # These contigs we insert into the chromosomes
        insert_df = df.loc[((df["count_per_bases_squared"] >= min_strength) & \
                            (df["scafsize"] >= params.min_insert_size)), ]
        append_df = df.loc[~((df["count_per_bases_squared"] >= min_strength) & \
                             (df["scafsize"] >= params.min_insert_size)), ]
        insert_df.reset_index(drop = True, inplace = True)
        append_df.reset_index(drop = True, inplace = True)

        # now print out those DFs to files so we can check them later
        insert_df.to_csv(output.inserted_scafs, sep = "\t", index = False)
        append_df.to_csv(output.appended_scafs, sep = "\t", index = False)


        # These contigs we insert into the scaffold to be printed in between
        #  the other scaffolds
        for index, row in insert_df.iterrows():
            this_seq = str(scaffold_dict[row["scaf"]].seq)
            chromosome_dict[row["chrom"]].insert(this_seq, row["cstop"])
            del scaffold_dict[row["scaf"]]
            scaffold_order.remove(row["scaf"])
            unseen_scafs.remove(row["scaf"])

        # These are the scaffolds that will be printed out later
        for index, row in append_df.iterrows():
            chromosome_dict[row["chrom"]].append(scaffold_dict[row["scaf"]])
            del scaffold_dict[row["scaf"]]
            scaffold_order.remove(row["scaf"])
            unseen_scafs.remove(row["scaf"])

        # Should be safe to move forward now
        outhandle = open(output.assem, "w")
        # now print out the chromosomes
        for thischrom in chrom_order:
            print("printing ", thischrom)
            chromosome_dict[thischrom].gen_chrom()
            SeqIO.write(chromosome_dict[thischrom].SeqRecord, outhandle, "fasta")
        # now write the other scaffolds
        for thischrom in chrom_order:
            for thisscaf in chromosome_dict[thischrom].non_inserted_scafs:
                SeqIO.write(thisscaf, outhandle, "fasta")
                try:
                    unseen_scafs.remove(thisscaf.id)
                except:
                    pass
        non_insert_handle = open(output.unseen_scafs, "w")
        # now write the scaffolds that didn't have any Hi-C connections to anything
        for thisscaf in unseen_scafs:
            SeqIO.write(scaffold_dict[thisscaf], outhandle, "fasta")
            print(thisscaf, file = non_insert_handle)
        outhandle.close()
        non_insert_handle.close()

        # at the end we print out some information about the fate of all the chromosomes
        s_num_scaffolds = num_scaffolds
        s_med_scaf_size = df["scafsize"].median()
        s_med_strength  = df["count_per_bases_squared"].median()
        scafs_larger_than_min   = len(df.loc[df["scafsize"] >= params.min_insert_size,])
        scafs_stronger_than_min = len(df.loc[df["count_per_bases_squared"] >= min_strength,])
        of = open(output.insertion_stats, "w")
        os = ""
        os += "******* STATS ABOUT GENOME ASSEMBLY *******\n"
        os += " Assembly file = {}\n".format(input.assem)
        os += " Best Hi-C hits: {}\n".format(input.hicm)
        os += "\n"
        os += " There were {} chromosomes specified in the config file.\n".format(len(config["chromosomes"]))
        os += " There were {} chromosomes found in the assembly file.\n".format(len(chrom_order))
        os += "\n"
        os += " There were {} scaffolds found in the genome fasta file.\n".format(s_num_scaffolds)
        os += "\n"
        os += " Approx median scaffold size (not including chroms): {} bp\n".format(int(s_med_scaf_size))
        os += " Approx HiC-to-chrom strength:  {} count/(MB^2)\n".format(s_med_strength)
        os += "\n"
        os += " The minimum scaffold size we will insert into the genome is: {}bp\n".format(params.min_insert_size)
        os += "   - There are {} out of {} ({:.2f}%) scaffolds with this minimum length.\n".format(
               scafs_larger_than_min, s_num_scaffolds,
               100*(scafs_larger_than_min/s_num_scaffolds))
        os += " The minimum Hi-C strength that will be inserted into the genome is: {}\n".format(min_strength)
        os += "   - There are {} out of {} ({:.2f}%) scaffolds with this minimum Hi-C strength.\n".format(
               scafs_stronger_than_min, s_num_scaffolds,
               100*(scafs_stronger_than_min/s_num_scaffolds))
        os += "\n"
        os += " When selecting for the min Hi-C strength and min length:\n"
        os += "   There are {} out of {} ({:.2f}%) scaffolds.\n".format(
                len(insert_df), s_num_scaffolds,
                100* (len(insert_df)/s_num_scaffolds))
        os += "\n"
        os += " Scaffolds that were appended to the end of the fasta:\n"
        os += "   - {} out of {} ({:.2f}%) scaffolds.\n".format(
                len(append_df), s_num_scaffolds,
                100* (len(append_df)/s_num_scaffolds))
        os += "\n"
        os += " Scaffolds that didn't appear in the Hi-C but were added to the end of the assembly:\n"
        os += "   - {} out of {} ({:.2f}%) scaffolds.\n".format(
                len(unseen_scafs), s_num_scaffolds,
                100* (len(unseen_scafs)/s_num_scaffolds))
        os += "\n"
        os += " Adding everything up:\n"
        #os += "   - {} chromosomes\n".format(len(chromosome_dict))
        os += "   - {} inserted\n".format(len(insert_df))
        os += "   - {} appended\n".format(len(append_df))
        os += "   - {} placed at end\n".format(len(unseen_scafs))
        os += "  ---------------------------\n".format(len(unseen_scafs))
        os += "   - {} out of {} ({:.2f}%) scaffolds.\n".format(
            len(insert_df) + \
            len(append_df) + \
            len(unseen_scafs),
            s_num_scaffolds,
            100 * (len(insert_df) + len(append_df) + len(unseen_scafs))/s_num_scaffolds)
        print()
        print(os)
        print(os, file = of)
        of.close()
